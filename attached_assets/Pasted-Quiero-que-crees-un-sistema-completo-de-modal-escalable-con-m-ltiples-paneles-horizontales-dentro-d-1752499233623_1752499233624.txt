Quiero que crees un sistema completo de modal escalable con múltiples paneles horizontales, dentro de la carpeta:

css
Copiar
Editar
src/components/modal/form
El objetivo es que este sistema permita manejar modales con tres paneles:

Panel izquierdo: visualización de datos (solo lectura)

Panel central: edición completa del formulario

Panel derecho: subformularios contextuales, como “Agregar evento”

🧱 1. Componente principal: FormModalLayout.tsx
Este componente debe aceptar las siguientes props:

ts
Copiar
Editar
interface FormModalLayoutProps {
  leftPanel?: ReactNode;
  centerPanel?: ReactNode;
  rightPanel?: ReactNode;
  onClose: () => void;
  showHeader?: boolean;
  showFooter?: boolean;
  headerContent?: ReactNode;
  footerContent?: ReactNode;
}
Comportamiento y estilo:
En desktop, el modal debe estar centrado horizontalmente (mx-auto), con max-w-screen-2xl.

En mobile, debe ocupar 100% del ancho y alto (w-full h-full) sin dejar márgenes.

Debe tener fondo oscuro (bg-black/50) cubriendo toda la pantalla (fixed inset-0 z-50).

Paneles deben estar alineados horizontalmente con scroll independiente (overflow-y-auto p-4).

leftPanel y rightPanel usan w-1/3 max-w-md, el centerPanel usa flex-1.

Mostrar un botón ✕ en la esquina superior derecha que ejecute onClose().

🧩 2. Componentes auxiliares:
Crear también en la misma carpeta:

FormModalHeader.tsx
Props: title?: string, rightContent?: ReactNode, onClose?: () => void

FormModalFooter.tsx
Props: leftContent?: ReactNode, rightContent?: ReactNode, o children.

Ambos deben poder integrarse opcionalmente en FormModalLayout mediante las props headerContent y footerContent.

🧪 3. Ejemplo funcional: TestFormModal.tsx
En el mismo directorio, crear un componente de prueba que:

Use FormModalLayout.

Tenga 3 estados simulados: "read", "edit", "subform".

Use un pequeño useState para simular navegación entre esos estados.

Muestre contenido ficticio en cada panel: por ejemplo, “Vista de Movimiento”, “Editar Movimiento”, “Agregar Evento”.

El modal debe abrirse al montar el componente (useEffect) y tener botón para cerrarlo.

🧼 Bonus (si lo necesitás):
Agregar animación de entrada opcional (transition-transform, translate-x) si lo ves útil.

Usar Tailwind para todo el diseño.

Importante: Todo debe quedar dentro de src/components/modal/form. El sistema debe ser limpio, reusable, escalable, y aplicable tanto a movimientos como bitácoras, presupuestos, contactos, etc.

