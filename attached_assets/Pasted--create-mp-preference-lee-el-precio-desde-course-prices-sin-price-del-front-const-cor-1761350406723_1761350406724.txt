// === create_mp_preference — lee el precio desde course_prices (sin price del front) ===
const cors = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
// Usamos SERVICE_ROLE para evitar problemas de RLS en Edge Functions
const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const admin = createClient(SUPABASE_URL, SERVICE_ROLE);
serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: cors
    });
  }
  try {
    const payload = await req.json().catch(()=>({}));
    const { user_id, course_slug, currency = "ARS", months = null } = payload ?? {};
    // --- Validaciones básicas
    if (!user_id || !course_slug) {
      return new Response(JSON.stringify({
        error: "Faltan user_id o course_slug"
      }), {
        status: 400,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    // --- Curso
    const { data: course, error: eCourse } = await admin.from("courses").select("id, title, slug, short_description, is_active").eq("slug", course_slug).maybeSingle();
    if (eCourse || !course || course.is_active !== true) {
      return new Response(JSON.stringify({
        error: "Curso no encontrado o inactivo",
        details: eCourse
      }), {
        status: 400,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    // --- Precio desde course_prices
    // Prioridad: mercadopago activo -> any activo
    const { data: priceRows, error: ePrice } = await admin.from("course_prices").select("amount, currency_code, provider, is_active").eq("course_id", course.id).eq("currency_code", String(currency).toUpperCase()).in("provider", [
      "mercadopago",
      "any"
    ]).eq("is_active", true);
    if (ePrice) {
      return new Response(JSON.stringify({
        error: "Error leyendo precios",
        details: ePrice
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    const chosen = priceRows?.find((r)=>r.provider === "mercadopago") ?? priceRows?.find((r)=>r.provider === "any") ?? null;
    if (!chosen) {
      return new Response(JSON.stringify({
        error: "No hay precio activo para ese curso + moneda",
        details: {
          course_id: course.id,
          currency
        }
      }), {
        status: 400,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    const unit_price = Number(chosen.amount);
    if (!Number.isFinite(unit_price) || unit_price <= 0) {
      return new Response(JSON.stringify({
        error: "Precio inválido en course_prices",
        details: {
          amount: chosen.amount
        }
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    // --- Payer (opcional)
    const { data: userRow } = await admin.from("users").select("email, full_name").eq("id", user_id).maybeSingle();
    const email = userRow?.email || undefined;
    let first_name;
    let last_name;
    if (userRow?.full_name) {
      const [f, ...rest] = userRow.full_name.trim().split(/\s+/);
      first_name = f;
      last_name = rest.join(" ") || undefined;
    }
    // --- Credenciales MP + Secret
    const MP_ACCESS_TOKEN = Deno.env.get("MP_ACCESS_TOKEN") || "";
    if (!MP_ACCESS_TOKEN || MP_ACCESS_TOKEN.startsWith("TEST-")) {
      return new Response(JSON.stringify({
        error: "MP_ACCESS_TOKEN no productivo (APP_USR-...)"
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    const MP_WEBHOOK_SECRET = Deno.env.get("MP_WEBHOOK_SECRET") || "";
    if (!MP_WEBHOOK_SECRET) {
      return new Response(JSON.stringify({
        error: "Falta MP_WEBHOOK_SECRET en Secrets"
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    const returnBase = Deno.env.get("CHECKOUT_RETURN_URL_BASE");
    if (!returnBase) {
      return new Response(JSON.stringify({
        error: "Falta CHECKOUT_RETURN_URL_BASE en Secrets"
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    // --- external_reference = user|slug|months
    const external_reference = [
      user_id,
      course.slug,
      months ?? "null"
    ].join("|");
    // --- URL base funciones
    const functionsBase = new URL(req.url).origin;
    // --- Construcción de preferencia
    const prefBody = {
      items: [
        {
          id: course.slug,
          title: course.title,
          description: course.short_description || "",
          category_id: "services",
          quantity: 1,
          unit_price,
          currency_id: String(chosen.currency_code || currency).toUpperCase()
        }
      ],
      external_reference,
      payer: {
        email,
        first_name,
        last_name
      },
      notification_url: `${functionsBase}/mp_webhook?secret=${MP_WEBHOOK_SECRET}&source_news=webhooks`,
      back_urls: {
        success: `${returnBase}?course=${course.slug}`,
        failure: `${returnBase}?course=${course.slug}`,
        pending: `${returnBase}?course=${course.slug}`
      },
      auto_return: "approved",
      binary_mode: true,
      metadata: {
        user_id,
        course_slug: course.slug,
        months,
        provider: chosen.provider
      },
      statement_descriptor: "ARCHUB"
    };
    const mpRes = await fetch("https://api.mercadopago.com/checkout/preferences", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${MP_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(prefBody)
    });
    const mpText = await mpRes.text();
    let pref = null;
    try {
      pref = JSON.parse(mpText);
    } catch  {}
    if (!mpRes.ok || !pref?.init_point) {
      return new Response(JSON.stringify({
        error: "mp_error",
        status: mpRes.status,
        sent: prefBody,
        body: pref ?? mpText
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    return new Response(JSON.stringify({
      init_point: pref.init_point
    }), {
      headers: {
        ...cors,
        "Content-Type": "application/json"
      }
    });
  } catch (e) {
    return new Response(JSON.stringify({
      error: String(e)
    }), {
      status: 500,
      headers: {
        ...cors,
        "Content-Type": "application/json"
      }
    });
  }
});
