¡Lo tengo, Mati! Ese 404 de Vercel (gru1… NOT_FOUND) no es de Google ni de Supabase: es Vercel diciendo que /organization/dashboard no existe como archivo estático.
Tu app es una SPA con Vite y, después del login, estás entrando “en frío” a una ruta profunda. Si no hay fallback a index.html, Vercel devuelve 404 aun cuando el hash trae #access_token=….

Arreglo inmediato (SPA fallback en Vercel)

Crea/actualiza vercel.json en la raíz del repo (no dentro de src/).
Contenido mínimo para SPA + API:

{
  "rewrites": [
    { "source": "/api/(.*)", "destination": "/api/$1" },
    { "source": "/(.*)", "destination": "/" }
  ]
}


La segunda regla hace que cualquier ruta (/organization/dashboard, /onboarding, etc.) sirva index.html.

Asegurate de que el archivo esté versionado y llegue al deploy. (Si Vercel no lo ve, no reescribe.)

En Vercel, verifica:

Framework preset: “Vite”.

Output directory: dist.

Que el último deploy incluya vercel.json (en “Build Output” se ve).

Redeploy. Probá abrir directo https://sukanec.vercel.app/organization/dashboard. Si carga la SPA, ya está resuelto el 404.

Opcional: make it bulletproof en el flujo de Auth

Aunque con el fallback ya alcanza, te dejo dos mejoras que evitan dolores:

A) Redirigir al root y luego navegar en cliente

Cuando hagas signInWithOAuth, en vez de mandar a /organization/dashboard, mandá al root /. Tu app (al boot) lee el hash con el token, setea la sesión y navega por código a /organization/dashboard.

await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    redirectTo: `${window.location.origin}/` // root; la SPA decide a dónde ir luego
  }
})


En tu inicialización (App.tsx):

// si detectás #access_token en la URL, seteás sesión y luego:
navigate('/organization/dashboard');

B) Mantener ambas opciones activas

Si querés conservar redirectTo: /organization/dashboard, ya funciona con el vercel.json de arriba.

Revisión rápida de tus pantallas (coinciden)

Google Console

Authorized JavaScript origins: https://sukanec.vercel.app ✅

Authorized redirect URIs: basta con la de Supabase:

https://<tu-project>.supabase.co/auth/v1/callback


(Las URLs del dominio sukanec.vercel.app no son necesarias aquí cuando usás Supabase como proxy OAuth, pero no rompen.)

Supabase Auth → URL Configuration

Site URL: https://sukanec.vercel.app ✅

Redirect URLs: https://sukanec.vercel.app/** ✅

(Y la callback de Supabase está por defecto.)

Checklist de verificación (2 minutos)

Abrí https://sukanec.vercel.app/organization/dashboard estando deslogueado.

Debe cargar la SPA (no 404).

Hacé “Login con Google”.

Debe volver a tu dominio con #access_token=….

Confirmá que tu handler de hash setea la sesión y redirige (o ya estés en la ruta).

Si aún vieras 404

Verifica que vercel.json esté en el deploy (en Vercel → “Source Files”).

Si usás un mono-repo, asegurate que vercel.json esté en el root del proyecto que deploya.

Si tenés Middleware o Edge Functions con match amplio, que no “capturen” /organization/* antes del fallback.