Prompt para Replit — “Completar flujo PayPal (Redirect + Capture)”

Quiero completar el flujo de PayPal en sandbox con Redirect + Capture. Hacé esto exacto:

1) Actualizar /api/paypal/create-order.ts (Node runtime)

Seguir usando las envs: PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PAYPAL_ENV y opcional PAYPAL_BASE_URL.

Agregar en el body de PayPal application_context con return_url y cancel_url apuntando a mi Preview de Vercel (reemplazar <PREVIEW_DOMAIN> por el dominio de preview actual, por ej. archub-git-main-xxxx.vercel.app):

application_context: {
  brand_name: "Archub",
  user_action: "PAY_NOW",
  return_url: `https://<PREVIEW_DOMAIN>/checkout/paypal/return`,
  cancel_url: `https://<PREVIEW_DOMAIN>/checkout/paypal/cancel`
}


Mantener el handler devolviendo siempre JSON (también en errores) como ya lo habíamos hecho.

2) Crear /api/paypal/capture-order.ts (Node runtime)

Endpoint POST que recibe { orderId } y hace:

OAuth a PayPal (igual que create-order).

POST {BASE}/v2/checkout/orders/${orderId}/capture.

Devuelve { ok:true, capture } o { ok:false, error, details }. Siempre JSON y con CORS abierto.

Código base (usalo tal cual):

export default async function handler(req: any, res: any) {
  const cors = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
  };
  if (req.method === "OPTIONS") return res.status(200).set(cors).send("ok");
  if (req.method !== "POST") return res.status(405).set(cors).json({ ok:false, error:"Method not allowed" });

  try {
    const { orderId } = req.body ?? {};
    if (!orderId) throw new Error("Falta 'orderId'");

    const cid = process.env.PAYPAL_CLIENT_ID!;
    const csec = process.env.PAYPAL_CLIENT_SECRET!;
    const env = (process.env.PAYPAL_ENV || "sandbox").toLowerCase();
    const base = process.env.PAYPAL_BASE_URL || (env === "live" ? "https://api-m.paypal.com" : "https://api-m.sandbox.paypal.com");

    const auth = Buffer.from(`${cid}:${csec}`).toString("base64");
    const tokenResp = await fetch(`${base}/v1/oauth2/token`, {
      method: "POST",
      headers: { Authorization: `Basic ${auth}`, "Content-Type": "application/x-www-form-urlencoded" },
      body: "grant_type=client_credentials",
    });
    const tokenText = await tokenResp.text();
    if (!tokenResp.ok) {
      return res.status(500).set(cors).json({ ok:false, error:`OAuth fallo ${tokenResp.status}`, details: tokenText });
    }
    const { access_token } = JSON.parse(tokenText);

    const capResp = await fetch(`${base}/v2/checkout/orders/${orderId}/capture`, {
      method: "POST",
      headers: { Authorization: `Bearer ${access_token}`, "Content-Type": "application/json" },
    });
    const capText = await capResp.text();
    let capJson: any; try { capJson = JSON.parse(capText); } catch { capJson = { raw: capText }; }
    if (!capResp.ok) {
      return res.status(500).set(cors).json({ ok:false, error:`Capture fallo ${capResp.status}`, details: capJson });
    }

    return res.status(200).set(cors).json({ ok:true, capture: capJson });
  } catch (e: any) {
    console.error("capture-order ERROR:", e);
    return res.status(500).set({ "Content-Type": "application/json", ...cors })
      .send(JSON.stringify({ ok:false, error: e?.message || "Unknown error" }));
  }
}

3) Crear páginas de retorno (SPA)

Mi app es SPA con Vite; generar dos vistas simples:

src/pages/checkout/paypal/return.tsx

Lee token de la query (?token=<ORDER_ID>).

Llama POST /api/paypal/capture-order con { orderId: token }.

Si ok, mostrar “Pago aprobado” y redirigir al curso (/learning/courses/${courseSlug}) o al dashboard.

Si error, mostrar mensaje y botón “Reintentar”.

src/pages/checkout/paypal/cancel.tsx

Mostrar “Pago cancelado” + botón para volver al checkout.

Si el proyecto no usa file-based routing, crear rutas equivalentes en mi router y asegurar que las URLs finales coinciden con las que pusimos en application_context.

4) Verificar el modal (no tocar lógica, solo chequear)

En PaymentMethodModal.tsx ya se arma order_id, calcula amountUsd y redirige al approvalLink. Correcto.

No cambiar nada salvo que falte el setLoading(false) en errores (ya está). (Archivo verificado).

5) Pruebas (usar Preview)

Redeploy en Preview (las env de PayPal están cargadas ahí).

Flujo: abrir modal → elegir PayPal → crear orden → PayPal login sandbox → Completar compra → vuelve a /checkout/paypal/return?token=... → el capture responde 200 → mostrar éxito.

Si falla: ver Vercel → Functions → Logs para create-order y capture-order.

Notas sobre los “errores” que viste

Los CORS a c.paypal.com y avisos de Datadog en la consola del navegador son ruido del sandbox/analytics y no bloquean el flujo. Lo que faltaba era el capture y el return_url.

Con esto, tu checkout PayPal queda profesional y cerrado de punta a punta. Si querés, después agregamos el webhook de PayPal en Supabase (igual que MP) para tener confirmación servidor-servidor e idempotencia perfecta.