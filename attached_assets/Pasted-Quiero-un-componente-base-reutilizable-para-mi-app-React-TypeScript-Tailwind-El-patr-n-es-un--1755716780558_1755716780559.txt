Quiero un componente base reutilizable para mi app (React + TypeScript + Tailwind). El patrón es un ítem de lista tipo card (“Data Row Card”), usado en mobile/desktop como reemplazo visual de filas de tabla.

Objetivo

Implementar un componente base DataRowCard que reciba props flexibles para renderizar:

leading (avatar/ícono/checkbox opcional)

content (título + hasta 3 líneas auxiliares configurables)

trailing (importe/currency + badges/estado + chevron/acciones)

Debe poder aceptar click (abrir modal o navegar) o ser puramente informativo.

Debe soportar densidad (compact/normal/comfortable), loading/skeleton, selección, deshabilitado, y accesibilidad (roles, aria, foco, teclado).

Stack/UI

React + TypeScript.

TailwindCSS.

(Opcional) Iconos de lucide-react si necesitás iconos genéricos.

Nada de dependencias pesadas.

Props requeridas (interfaz exacta)
export type Density = 'compact' | 'normal' | 'comfortable';

export type Line = {
  /** Texto principal de la línea (puede incluir valores dinámicos) */
  text: string;
  /** Color semántico opcional: 'muted' | 'success' | 'warning' | 'danger' | 'info' */
  tone?: 'muted' | 'success' | 'warning' | 'danger' | 'info';
  /** hint pequeño a la derecha (ej. código de moneda, %), opcional */
  hintRight?: string;
  /** si true, renderizar como monoespaciado (importe) */
  mono?: boolean;
};

export interface DataRowCardProps {
  /** Leading slot */
  avatarUrl?: string;
  avatarFallback?: string;        // ej: “A”
  iconName?: string;              // si no hay avatar, usar ícono (lucide)
  selectable?: boolean;           // muestra checkbox a la izquierda
  selected?: boolean;

  /** Content slot */
  title: string;                  // línea principal (negrita)
  subtitle?: string;              // línea secundaria (muted)
  lines?: Line[];                 // hasta 3 líneas auxiliares (validar máx.)

  /** Trailing slot */
  amount?: number;                // importe numérico
  currencyCode?: string;          // ej: ARS, USD
  amountTone?: 'neutral' | 'success' | 'danger'; // color del importe
  badgeText?: string;             // ej: “Pendiente”, “Pagado”
  showChevron?: boolean;          // flechita >

  /** Comportamiento */
  onClick?: () => void;           // si está presente → cursor-pointer, role="button"
  disabled?: boolean;
  loading?: boolean;
  density?: Density;              // default: 'normal'
  className?: string;
  'data-testid'?: string;
}

Reglas de render

Leading:

Si selectable → render checkbox antes de todo (manejar selected).

Si hay avatarUrl → círculo 32–40px. Si no, usar avatarFallback (iniciales).

Si no hay avatar pero iconName, renderizar ícono 18–20px.

Content:

title en semibold, 1 línea, ellipsis.

subtitle en muted, 1 línea, ellipsis.

lines (máx. 3). Cada Line respeta tone (mapea a clases Tailwind) y mono.

Trailing:

amount formateado con Intl.NumberFormat (usar currencyCode si viene; si no, formateo local con separadores).

Aplicar amountTone: success (verde), danger (rojo), neutral (gris).

badgeText como pill pequeño.

showChevron agrega “>” o un ícono de chevron.

Interacción/Accesibilidad:

Si hay onClick y no disabled: role="button", tabIndex=0, onKeyDown (Enter/Espacio dispara click), foco visible.

Si disabled, bajar opacidad y bloquear eventos.

Densidad:

compact: py-2, gap-2, leading 32px, fuente más chica.

normal (default): py-3, leading 40px.

comfortable: py-4, leading 48px.

Loading:

Renderizar skeletons en lugar de contenido (bars para title/subtitle/lines y círculo para avatar).

Responsive:

En pantallas chicas, limitar ancho de trailing y truncar textos con ellipsis.

Testing:

Pasar data-testid a la raíz.

Entregables

DataRowCard.tsx con Tailwind listo, incluyendo:

Interfaz DataRowCardProps.

Helper formatAmount(amount, currencyCode?).

Mapeo de tones → clases Tailwind.

Estados: hover, active, focus-visible, disabled, selected, loading.

Ejemplos de uso en Story o Examples.tsx:

a) Movimiento (tiene 2 filas de datos):

title: “Materiales”

subtitle: “Acopio”

lines: [ { text: '-$13.000', tone: 'danger', mono: true, hintRight: 'ARS' }, { text: 'Gas (Mattioni)', tone: 'muted' } ]

leading: avatar con “A”

trailing: showChevron: true

onClick: abre modal (placeholder).

b) Pago de cliente:

title: “Aporte — Osvaldo Robert”

lines: [ { text: '+$9.305.263', tone: 'success', mono: true, hintRight: 'ARS' }, { text: 'UF02 · Cuota 1', tone: 'info' } ]

badgeText: “Confirmado”.

c) Ítem deshabilitado y loading.

Wrappers por tabla de ejemplo:

MovementRow.tsx (usa DataRowCard y mapea tu modelo Movement a props).

ClientPaymentRow.tsx (mapea MovementPaymentsViewRow a props).

Los wrappers NO deben duplicar estilos, solo transformar datos → props.

Aceptación

Lighthouse/axe sin errores críticos de accesibilidad (roles/aria/focus).

Teclas Enter/Espacio disparan onClick cuando existe.

Mobile-first, se ve bien en 360px.

Sin dependencias extra salvo lucide-react opcional.

Código tipado, export default del componente.

Incluir comentarios breves en el código explicando decisiones clave.

Generá el código completo listo para pegar (componentes + ejemplos). No uses frameworks de UI externos; solo Tailwind.