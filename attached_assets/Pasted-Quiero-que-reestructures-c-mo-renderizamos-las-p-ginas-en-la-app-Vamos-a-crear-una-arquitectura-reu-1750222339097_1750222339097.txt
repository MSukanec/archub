Quiero que reestructures c칩mo renderizamos las p치ginas en la app. Vamos a crear una arquitectura reusable con layout + header + contenido.

---

游댢 1. Cre치 un nuevo archivo en `client/src/components/ui-custom/CustomPageLayout.tsx`.

Este componente debe:

- Renderizar un contenedor general (`div`) que centre el contenido (`justify-center`)
- Dentro, tener un `div` con `max-w-[1440px] px-4` por defecto
- Si recibe `wide={true}`, debe ocupar todo el ancho (`max-w-none`)
- Este `div` interno contendr치 el `CustomPageHeader` y debajo el `children` (contenido de la p치gina)

Agregale un `border` de color rojo para debug visual.

---

游댢 2. Modific치 el componente `CustomPageHeader.tsx` (que ya existe):

- Debe dejar de ocupar `w-full`
- Su contenido debe adaptarse al ancho del contenedor padre
- La altura total debe ser 76px, dividida en dos filas de exactamente 38px cada una
- La primera fila: 칤cono + t칤tulo a la izquierda, botones (`actions`) a la derecha
- La segunda fila: campo de b칰squeda (100% de ancho), bot칩n de filtros con dropdown din치mico, y bot칩n de "Limpiar filtros"

Agregale `border` de color verde a este header para debug.

---

游늯 3. Aplicalo ya en las siguientes p치ginas:

- `pages/Dashboard.tsx`
- `pages/Organizations.tsx`

En ambas p치ginas:

- Reemplaz치 el uso de `PageHeader` por `CustomPageLayout`
- Us치 los props correctamente (`title`, `icon`, `actions`, `showSearch`, etc.)
- Como contenido `children`, dej치 todo lo que estaba debajo del header original

Agregale un `border` de color azul al bloque del `children` para ver d칩nde empieza.

---

游늬 4. Ubicaci칩n de archivos:

- `CustomPageLayout.tsx` debe ir en `client/src/components/ui-custom/`
- El componente `CustomPageHeader.tsx` ya est치 en esa carpeta

---

游꿢 El objetivo es que a partir de ahora todas las p치ginas usen este layout reusable. Queremos que header y contenido est칠n perfectamente alineados y centrados dentro de un contenedor com칰n (1440px m치ximo por defecto).
