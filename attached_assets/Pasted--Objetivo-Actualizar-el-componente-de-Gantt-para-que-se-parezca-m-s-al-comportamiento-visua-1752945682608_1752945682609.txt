### üéØ Objetivo

Actualizar el componente de Gantt para que se parezca m√°s al comportamiento visual de Jira. Se deben implementar dos mejoras clave:

---

## ‚úÖ 1. Encabezado de fechas con doble fila (Mes y D√≠as)

### Comportamiento esperado:
- La fila superior muestra el nombre del mes y a√±o (`July '24`, `August '24`, etc.)
- La fila inferior muestra los d√≠as num√©ricos (`15`, `16`, `17`, ..., `31`, `1`, etc.)
- Los d√≠as deben estar agrupados correctamente debajo del mes correspondiente.
- Las columnas deben estar alineadas visualmente con la grilla del Gantt (timeline).

### Implementaci√≥n:
- Dentro del componente `GanttContainer`, reemplazar el encabezado actual por dos filas:
  ```tsx
  <thead>
    <tr>
      <th className="w-[leftPanelWidth]">Rubro / Tarea</th>
      {months.map(month => (
        <th key={month.label} colSpan={month.days.length} className="text-center">
          {month.label}
        </th>
      ))}
    </tr>
    <tr>
      <th />
      {allDays.map(day => (
        <th key={day.date}>{day.day}</th>
      ))}
    </tr>
  </thead>
Los arrays months y allDays deben calcularse din√°micamente a partir de timelineStart y timelineEnd.

Usar date-fns o similar para agrupar por mes y generar la lista de d√≠as.

‚úÖ 2. Panel izquierdo con ancho ajustable mediante drag & drop
Comportamiento esperado:
El panel izquierdo (Rubro / Tarea) debe comenzar con un ancho fijo (ej: 320px)

El usuario puede arrastrar un "handle" vertical para modificar el ancho en tiempo real

El contenido debe truncarse con ... si no entra (usando truncate)

Al expandir el ancho, el texto visible debe actualizarse en vivo

Implementaci√≥n:
En GanttContainer, declarar:

tsx
Copiar
Editar
const [leftPanelWidth, setLeftPanelWidth] = useState(320);
En el layout principal del Gantt:

tsx
Copiar
Editar
<div className="flex">
  {/* Panel Izquierdo */}
  <div style={{ width: leftPanelWidth }} className="relative">
    {/** encabezados + filas del lado izquierdo */}
    <div 
      className="absolute top-0 right-0 w-2 h-full cursor-col-resize z-10"
      onMouseDown={startResize}
    />
  </div>

  {/* Timeline */}
  <div className="flex-1 overflow-x-auto">
    {/** timeline grid, barras, etc */}
  </div>
</div>
L√≥gica de resize:

tsx
Copiar
Editar
const startResize = (e: React.MouseEvent) => {
  const startX = e.clientX;
  const startWidth = leftPanelWidth;

  const onMouseMove = (e: MouseEvent) => {
    const newWidth = startWidth + (e.clientX - startX);
    setLeftPanelWidth(Math.max(200, newWidth));
  };

  const onMouseUp = () => {
    window.removeEventListener('mousemove', onMouseMove);
    window.removeEventListener('mouseup', onMouseUp);
  };

  window.addEventListener('mousemove', onMouseMove);
  window.addEventListener('mouseup', onMouseUp);
};
En GanttLeftPanel.tsx, asegurarse de que el nombre de la tarea est√© truncado:

tsx
Copiar
Editar
<span className="truncate">{item.name}</span>
‚úÖ Resultado esperado
El encabezado del Gantt tendr√° dos filas: meses y d√≠as

La grilla estar√° alineada perfectamente con la timeline

El panel izquierdo podr√° expandirse o contraerse con el mouse

El texto largo de las tareas se truncar√°, pero podr√° verse m√°s si el usuario lo estira

üß† Extras (no obligatorios pero recomendados)
Guardar el leftPanelWidth en localStorage para que recuerde el ancho entre sesiones

Mostrar un tooltip al hacer hover sobre el texto truncado (title={item.name})

Animar el resize suavemente (transition-all)