Objetivo: Crear un sistema centralizado de modales en Archub llamado ModalFactory, que permita abrir distintos tipos de modales (como bit√°cora, movimiento, contacto, etc.) desde cualquier lugar de la app, usando Zustand para manejar su estado global.

üìÅ Archivos y estructura esperada
Crear en esta ruta:

swift
Copiar
Editar
src/components/modal/factory/
Y generar los siguientes archivos:

pgsql
Copiar
Editar
ModalFactory.tsx
useGlobalModalStore.ts
types.ts
üß± 1. useGlobalModalStore.ts (Zustand store)
Debe exportar un hook Zustand con el siguiente shape:

ts
Copiar
Editar
type ModalType = "movement" | "bitacora" | "contact";

interface GlobalModalState {
  open: boolean;
  type: ModalType | null;
  data: any;
  openModal: (type: ModalType, data?: any) => void;
  closeModal: () => void;
}
üß© 2. ModalFactory.tsx
Componente que renderiza el modal correcto seg√∫n type:

ts
Copiar
Editar
import { MovementModal } from '@/components/modals/MovementModal';
import { BitacoraModal } from '@/components/modals/BitacoraModal';
import { ContactModal } from '@/components/modals/ContactModal';
import { useGlobalModalStore } from './useGlobalModalStore';

export function ModalFactory() {
  const { open, type, data, closeModal } = useGlobalModalStore();

  if (!open || !type) return null;

  switch (type) {
    case 'movement':
      return <MovementModal open={open} onClose={closeModal} data={data} />;
    case 'bitacora':
      return <BitacoraModal open={open} onClose={closeModal} data={data} />;
    case 'contact':
      return <ContactModal open={open} onClose={closeModal} data={data} />;
    default:
      return null;
  }
}
üìÅ 3. types.ts
Archivo de tipos donde se define:

ts
Copiar
Editar
export type ModalType = "movement" | "bitacora" | "contact";
üß™ BONUS (opcional pero √∫til)
Crear un bot√≥n de prueba llamado OpenMovementButton.tsx que al hacer clic haga:

ts
Copiar
Editar
const { openModal } = useGlobalModalStore();
openModal("movement", { id: "1234" });
IMPORTANTE:

Este sistema debe funcionar con los modales existentes que ya usan FormModalLayout.

El objetivo es que puedas usar openModal(type, data) desde cualquier lugar sin importar el contexto.