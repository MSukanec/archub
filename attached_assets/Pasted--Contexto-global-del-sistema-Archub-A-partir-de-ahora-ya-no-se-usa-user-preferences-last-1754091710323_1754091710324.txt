### üß† Contexto global del sistema Archub

A partir de ahora **ya no se usa `user_preferences.last_project_id`** como √∫nico campo global. En su lugar, se implement√≥ una nueva tabla llamada `user_organization_preferences` para guardar el `last_project_id` **por organizaci√≥n**, de forma m√°s precisa y escalable.

---

### ‚úÖ Nuevas convenciones y l√≥gica

1. **Tabla `user_organization_preferences`:**
   - Guarda el √∫ltimo proyecto usado por cada usuario dentro de cada organizaci√≥n.
   - Es la √∫nica fuente v√°lida para saber qu√© proyecto usar al cambiar de organizaci√≥n.

2. **La funci√≥n `archub_get_user()`** fue modificada para:
   - Devolver `preferences.last_project_id` desde `user_organization_preferences`, y no m√°s desde `user_preferences`.

3. **La funci√≥n `archub_new_user()` tambi√©n fue actualizada** para:
   - Crear autom√°ticamente una fila en `user_organization_preferences` cuando se registra un nuevo usuario y se crea su primera organizaci√≥n.

---

### üöÄ Qu√© debe hacer Replit en el frontend:

#### üìçAl iniciar sesi√≥n (o al llamar a `archub_get_user()`):

- El objeto `preferences.last_organization_id` sigue viniendo desde `user_preferences`
- El `preferences.last_project_id` ya viene correctamente desde la nueva tabla
- ‚ö†Ô∏è Por lo tanto, **no se debe confiar m√°s en `user_preferences.last_project_id` como algo global**

#### üß† Cuando el usuario cambia de organizaci√≥n:

- Llamar a una funci√≥n tipo `getLastProjectForUserInOrganization(userId, organizationId)`
  - Esta consulta debe buscar en la tabla `user_organization_preferences`
  - Si hay una fila, usar su `last_project_id`
  - Si no hay fila, se puede crear con `last_project_id = null` (opcional)

#### üìù Cuando el usuario selecciona o cambia de proyecto:

- Actualizar la tabla `user_organization_preferences` haciendo un **UPSERT** con:
  - `user_id`
  - `organization_id`
  - `last_project_id`

#### Ejemplo de UPSERT SQL (para backend o Supabase RPC):

```sql
insert into user_organization_preferences (user_id, organization_id, last_project_id, created_at, updated_at)
values ('...', '...', '...', now(), now())
on conflict (user_id, organization_id)
do update set last_project_id = excluded.last_project_id, updated_at = now();
‚úÖ Reglas clave para trabajar:
user_preferences sigue existiendo, pero ya no contiene last_project_id confiable.

Siempre que se requiera el proyecto actual, consultar user_organization_preferences con la organizaci√≥n activa.

Al cambiar organizaci√≥n, tambi√©n cambiar el proyecto asociado.