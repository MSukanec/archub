Quiero auditar y corregir los endpoints de PayPal en /api/paypal para que funcionen con el webhook real en Supabase. Aplica exactamente estos cambios:

Objetivo general

La orden debe incluir purchase_units[0].custom_id con metadatos en Base64.

create-order.ts crea la orden y devuelve el id.

capture-order.ts hace el capture y devuelve el JSON de PayPal (NO escribe en DB).

capture-and-redirect.ts solo redirige a la UI de éxito/cancel.

webhook.ts local NO debe usarse (el webhook válido es la Edge Function paypal_webhook en Supabase). Deja una respuesta 410 para evitar confusiones.

Manejar CORS idéntico en todos los endpoints.

1) Crea/actualiza un helper local dentro de /api/paypal/_utils.ts con:

Función cors() que devuelva los headers CORS (origin *, allow headers authorization, x-client-info, apikey, content-type, methods POST, GET, OPTIONS, max-age 86400).

Función paypalBase() que use PAYPAL_BASE_URL si existe o derive de PAYPAL_ENV (sandbox → https://api-m.sandbox.paypal.com, live → https://api-m.paypal.com).

Función getAccessToken() que haga POST /v1/oauth2/token con Basic ${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET} y grant_type=client_credentials.

Código exacto de _utils.ts:

export const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
  "Access-Control-Max-Age": "86400",
};

export function paypalBase() {
  const override = process.env.PAYPAL_BASE_URL;
  if (override) return override;
  const env = (process.env.PAYPAL_ENV || "sandbox").toLowerCase();
  return env === "live" ? "https://api-m.paypal.com" : "https://api-m.sandbox.paypal.com";
}

export async function getAccessToken() {
  const cid = process.env.PAYPAL_CLIENT_ID!;
  const sec = process.env.PAYPAL_CLIENT_SECRET!;
  const base = paypalBase();
  const auth = Buffer.from(`${cid}:${sec}`).toString("base64");
  const r = await fetch(`${base}/v1/oauth2/token`, {
    method: "POST",
    headers: {
      "Authorization": `Basic ${auth}`,
      "Content-Type": "application/x-www-form-urlencoded"
    },
    body: "grant_type=client_credentials"
  });
  if (!r.ok) throw new Error(`OAuth ${r.status}`);
  const j = await r.json();
  return j.access_token as string;
}


2) Reemplaza por completo /api/paypal/create-order.ts con:

import type { VercelRequest, VercelResponse } from "@vercel/node";
import { corsHeaders, paypalBase, getAccessToken } from "./_utils";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method === "OPTIONS") return res.setHeader("Access-Control-Allow-Origin", "*").setHeader("Access-Control-Allow-Headers", corsHeaders["Access-Control-Allow-Headers"]).setHeader("Access-Control-Allow-Methods", corsHeaders["Access-Control-Allow-Methods"]).status(200).send("ok");
  if (req.method !== "POST") return res.setHeader("Access-Control-Allow-Origin", "*").status(405).json({ ok:false, error:"Method not allowed" });

  try {
    const { user_id, course_slug, amount_usd, description = "Archub purchase" } = typeof req.body === "string" ? JSON.parse(req.body) : req.body;

    if (!user_id || !course_slug || !amount_usd) {
      return res.setHeader("Access-Control-Allow-Origin", "*").status(400).json({ ok:false, error:"Missing user_id, course_slug or amount_usd" });
    }

    const metaB64 = Buffer.from(JSON.stringify({ type:"course", user_id, course_slug })).toString("base64");
    const base = paypalBase();
    const token = await getAccessToken();

    const returnBase = process.env.CHECKOUT_RETURN_URL_BASE || "https://localhost:3000";
    const body = {
      intent: "CAPTURE",
      purchase_units: [{
        amount: { currency_code: "USD", value: String(amount_usd) },
        description,
        custom_id: metaB64,
      }],
      application_context: {
        brand_name: "Archub",
        user_action: "PAY_NOW",
        return_url: `${returnBase}/checkout/paypal/return`,
        cancel_url: `${returnBase}/checkout/paypal/cancel`,
      }
    };

    const r = await fetch(`${base}/v2/checkout/orders`, {
      method: "POST",
      headers: { "Authorization": `Bearer ${token}`, "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });
    const j = await r.json();
    if (!r.ok) return res.setHeader("Access-Control-Allow-Origin", "*").status(r.status).json({ ok:false, error:j });

    return res.setHeader("Access-Control-Allow-Origin", "*").status(200).json({ ok:true, order:j });
  } catch (e:any) {
    return res.setHeader("Access-Control-Allow-Origin", "*").status(500).json({ ok:false, error:String(e?.message||e) });
  }
}


3) Reemplaza por completo /api/paypal/capture-order.ts con:

import type { VercelRequest, VercelResponse } from "@vercel/node";
import { corsHeaders, paypalBase, getAccessToken } from "./_utils";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method === "OPTIONS") return res.setHeader("Access-Control-Allow-Origin", "*").setHeader("Access-Control-Allow-Headers", corsHeaders["Access-Control-Allow-Headers"]).setHeader("Access-Control-Allow-Methods", corsHeaders["Access-Control-Allow-Methods"]).status(200).send("ok");
  if (req.method !== "POST") return res.setHeader("Access-Control-Allow-Origin", "*").status(405).json({ ok:false, error:"Method not allowed" });

  try {
    const { orderId } = typeof req.body === "string" ? JSON.parse(req.body) : req.body;
    if (!orderId) return res.setHeader("Access-Control-Allow-Origin", "*").status(400).json({ ok:false, error:"Missing orderId" });

    const base = paypalBase();
    const token = await getAccessToken();
    const r = await fetch(`${base}/v2/checkout/orders/${orderId}/capture`, {
      method: "POST",
      headers: { "Authorization": `Bearer ${token}`, "Content-Type": "application/json" }
    });
    const j = await r.json();
    if (!r.ok) return res.setHeader("Access-Control-Allow-Origin", "*").status(r.status).json({ ok:false, error:j });

    // Importante: NO escribir en DB aquí (lo hace el webhook en Supabase)
    return res.setHeader("Access-Control-Allow-Origin", "*").status(200).json({ ok:true, capture:j });
  } catch (e:any) {
    return res.setHeader("Access-Control-Allow-Origin", "*").status(500).json({ ok:false, error:String(e?.message||e) });
  }
}


4) Asegura que /api/paypal/capture-and-redirect.ts:

Lea token/PayerID/orderId desde query.

Opcionalmente muestre un “Pago exitoso” y redirija a la página del curso (no toca DB).
Si no existe, crea un handler mínimo que devuelva 200 con HTML simple y un setTimeout para volver al curso.

5) Reemplaza /api/paypal/webhook.ts con una respuesta 410 para evitar confusión (el real está en Supabase):

import type { VercelRequest, VercelResponse } from "@vercel/node";
export default async function handler(_req: VercelRequest, res: VercelResponse) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  return res.status(410).json({
    ok: false,
    message: "Este endpoint no se usa. El webhook válido es la Edge Function `paypal_webhook` en Supabase."
  });
}