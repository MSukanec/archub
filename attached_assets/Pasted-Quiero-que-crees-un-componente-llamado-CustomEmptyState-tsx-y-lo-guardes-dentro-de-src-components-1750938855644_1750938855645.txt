Quiero que crees un componente llamado `CustomEmptyState.tsx` y lo guardes dentro de `src/components/ui-custom/misc/`.

---

### üéØ Objetivo:
Este componente representa un **estado vac√≠o contextual** (por ejemplo, cuando no hay proyectos, tareas, etc.). Debe mostrar una caja con borde punteado y estilo visual llamativo, que puede contener:

- Un √≠cono personalizado (usando cualquier √≠cono de Lucide).
- Un t√≠tulo (`title`).
- Un texto descriptivo (`description`).
- Un bot√≥n opcional (`action`), que puede ser omitido si no se necesita.

---

### üí° Props esperadas:

```ts
interface CustomEmptyStateProps {
  icon: React.ReactNode;
  title: string;
  description?: string;
  action?: React.ReactNode;
  className?: string;
}
üé® Estilos:
El contenedor debe tener:

Un borde punteado (border-dashed) usando el color var(--accent).

Padding generoso (p-8 o similar).

Un rounded-xl o rounded-2xl.

Fondo opcional (bg-muted/10) o bg-background.

Transici√≥n suave.

Debe ocupar el 100% del ancho disponible y tener m√°ximo 500‚Äì600px centrado (max-w-lg mx-auto).

‚ú® Animaci√≥n visual opcional:
Agreg√° un efecto de part√≠culas o puntos flotantes muy sutiles, solo si no impacta en performance.

Pod√©s usar un simple <div className="animate-pulse bg-accent/20 rounded-full w-2 h-2 ..."> como efecto visual decorativo.

Esto debe ser muy sutil, decorativo, no funcional ni invasivo.

üß© Comportamiento:
Si no se pasa action, simplemente no renderizar el bot√≥n.

Si se pasa, renderizarlo centrado debajo del texto.

El √≠cono debe estar arriba, centrado, dentro de un c√≠rculo claro con sombra suave.

üß™ Ejemplo de uso:
tsx
Copiar
Editar
<CustomEmptyState
  icon={<Folder className="w-8 h-8 text-muted-foreground" />}
  title="A√∫n no tienes proyectos"
  description="Comienza creando tu primer proyecto para esta organizaci√≥n"
  action={
    <Button onClick={handleCreateProject}>
      <Plus className="w-4 h-4 mr-2" />
      Crear Proyecto
    </Button>
  }
/>
Us√° Tailwind para todos los estilos. Manten√© el dise√±o elegante, aireado y consistente con la UI existente. Asegurate de que el componente sea completamente reutilizable para m√∫ltiples contextos (proyectos, tareas, clientes, etc).