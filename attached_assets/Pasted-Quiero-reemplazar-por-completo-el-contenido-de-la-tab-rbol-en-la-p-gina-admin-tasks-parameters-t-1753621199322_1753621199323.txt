Quiero reemplazar por completo el contenido de la tab "Árbol" en la página `admin/tasks_parameters.tsx`.

✅ Objetivo:
Crear un **editor visual de dependencias** entre parámetros usando la librería **React Flow**.

🎯 ¿Qué debe hacer este nuevo componente?

1. **Usar React Flow** para mostrar un lienzo de trabajo tipo "infinito" donde cada **nodo representa un parámetro** (`task_parameters`).
2. Cada nodo debe mostrar el nombre del parámetro (`parameter.name`) y contener sus opciones (`task_parameter_values`).
3. Cada **opción del parámetro debe tener un pin de salida**, que puede conectarse a otro nodo.
4. Las conexiones definen **dependencias** entre parámetros. Por ejemplo:
   - Si `Parámetro A` tiene una opción "X" que activa `Parámetro B`, entonces se dibuja un cable entre ellas.
5. El usuario debe poder:
   - Arrastrar nodos
   - Conectar pines de opciones a otros parámetros
   - Eliminar conexiones
   - Agregar o borrar nodos (opcional por ahora)
6. Guardar las conexiones como relaciones en la base de datos Supabase:
   - `task_parameter_dependencies`: define qué parámetro se activa por cuál
   - `task_parameter_dependency_options`: define qué opción específica del parámetro origen activa el destino
7. El workspace debe ser 100% responsivo y tener zoom + scroll infinito.
8. Borrar el contenido actual de la tab "Árbol" y reemplazarlo por este nuevo componente.
9. Crear un archivo llamado `ParameterNodeEditor.tsx` y colocarlo en la carpeta `src/components/admin/tasks_parameters/`.
10. Usar Tailwind para el diseño, modo oscuro claro según el tema de la app.
11. Si es necesario, crear hooks auxiliares para cargar y guardar los datos de parámetros, opciones y dependencias.

📦 Supabase:
Las tablas que ya existen son:
- `task_parameters` (id, name, etc.)
- `task_parameter_values` (id, parameter_id, value, etc.)
- `task_parameter_dependencies` (id, source_parameter_id, target_parameter_id)
- `task_parameter_dependency_options` (id, dependency_id, source_option_id)

🧩 Recursos útiles:
- https://reactflow.dev/docs
- Buscar ejemplo de "Custom Nodes with Handles"
- Usar tipo `"default"` para edges por ahora

🧪 Prioridad:
- Que funcione
- Que sea claro para el usuario
- Que permita guardar y volver a cargar conexiones fácilmente

Este será un sistema visual para construir árboles genealógicos de decisiones entre parámetros. Es crítico que sea estable, claro, escalable y elegante.