⚠️ Rehace por completo el sistema de modal basado en lo siguiente:

🧠 Comportamiento deseado:
Queremos que el modal esté dividido en 3 paneles horizontales, que se muestran dinámicamente uno a la vez según el estado actual. No deben verse todos al mismo tiempo.

Cada uno representa una etapa diferente del flujo:

Panel de solo lectura → para ver la info sin editar (view mode)

Panel de edición principal → para editar todos los campos (edit mode)

Panel de subformulario → para completar info secundaria, como “Agregar evento” o “Agregar asistencia” (subform mode)

📦 Estructura esperada:
Crear en src/components/modal/form los siguientes archivos:

scss
Copiar
Editar
FormModalLayout.tsx
FormModalHeader.tsx
FormModalFooter.tsx
TestFormModal.tsx
modalPanelStore.ts (Zustand)
🧱 1. FormModalLayout.tsx
Este componente debe renderizar dinámicamente solo uno de los tres paneles a la vez, en función del estado global manejado por Zustand.

Props:

ts
Copiar
Editar
interface FormModalLayoutProps {
  viewPanel?: ReactNode;
  editPanel?: ReactNode;
  subformPanel?: ReactNode;
  onClose: () => void;
  headerContent?: ReactNode;
  footerContent?: ReactNode;
}
Comportamiento:

Se debe mostrar únicamente uno de los tres (view, edit, subform).

El panel activo se controla desde un Zustand store (modalPanelStore.ts) con estado currentPanel = 'view' | 'edit' | 'subform'.

Al hacer clic en “Editar” desde el panel de lectura, se pasa al panel de edición.

Al hacer clic en “Agregar evento” en edición, se pasa al subformulario.

Al guardar en el subformulario, se vuelve al de edición.

Estilos:

En desktop: modal centrado (max-w-screen-2xl, rounded, shadow, mx-auto, my-12)

En mobile: debe ocupar 100% del viewport (w-full h-full rounded-none)

🧩 2. FormModalHeader.tsx y FormModalFooter.tsx
Reutilizables, independientes.

Deben aceptar title, onClose, actions (izquierda/derecha).

🧪 3. TestFormModal.tsx
Simula el comportamiento real:

Empieza en modo "view"

Al hacer clic en “Editar”, cambia a "edit"

Al hacer clic en “Agregar Evento”, cambia a "subform"

Desde subform, al guardar, vuelve a "edit"

Cada panel debe mostrar contenido distinto (aunque sea dummy) para confirmar la navegación.

🧠 4. modalPanelStore.ts (Zustand)
Exporta: currentPanel, setPanel('view' | 'edit' | 'subform')

Maneja el estado global del modal y permite controlar desde cualquier panel.