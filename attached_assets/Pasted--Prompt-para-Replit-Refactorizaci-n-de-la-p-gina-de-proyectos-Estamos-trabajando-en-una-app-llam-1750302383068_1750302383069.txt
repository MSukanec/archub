üß† Prompt para Replit: Refactorizaci√≥n de la p√°gina de proyectos

Estamos trabajando en una app llamada Archub. Ya tenemos una estructura SPA bien definida con componentes reutilizables. Tambi√©n creamos un archivo llamado ai-page-template.md donde se especifica la estructura visual que deben seguir las p√°ginas, y otro llamado ai-modal-template.md para los modales. Ambos est√°n en la carpeta /prompts y deben ser usados como contexto previo obligatorio antes de escribir o modificar c√≥digo.

Ahora quiero que tomes la p√°gina de proyectos (Projects.tsx) y la modifiques con los siguientes objetivos:

‚úÖ 1. Redise√±ar la vista de proyectos
En lugar de usar un layout tipo "card" por proyecto, quiero que toda la lista de proyectos aparezca como una tabla de ancho completo, al estilo de la interfaz que te adjunto como referencia visual (archivo llamado 6c9e77c7.png).
Cada fila representa un proyecto. Las columnas deben ser:

Fecha de creaci√≥n (created_at)

Miembro creador (created_by) ‚Äî Mostrar el avatar y nombre

Nombre del proyecto (name) ‚Äî clickable (selecciona el proyecto)

Estado del proyecto (status) ‚Äî usar Badge

Acciones ‚Äî Botones para editar (abre modal) y eliminar (con confirmaci√≥n)

‚úÖ 2. Funcionalidad de selecci√≥n de proyecto
Al hacer clic en el nombre del proyecto, se debe ejecutar la misma l√≥gica actual de selecci√≥n de proyecto (con useMutation ‚Üí user_preferences.last_project_id).
Debe marcarse visualmente el proyecto seleccionado (por ejemplo con un √≠cono üëë como ahora).

‚úÖ 3. Editar proyecto desde la tabla
El bot√≥n "Editar" debe abrir el modal ya creado (NewProjectModal) pero en modo edici√≥n.
Si es necesario, duplic√° la l√≥gica actual del modal para permitir modo edici√≥n con valores iniciales y update.

‚úÖ 4. Eliminar proyecto
El bot√≥n "Eliminar" debe mostrar un modal de confirmaci√≥n (confirm() o AlertDialog) y luego eliminar el proyecto de la base de datos. Usar Supabase y manejar errores con toast.

‚úÖ 5. Consideraciones t√©cnicas
El campo created_by es un UUID que apunta a organization_members.id, pero la informaci√≥n del usuario debe venir de organization_member_details o directamente de user.full_name y user.avatar_url si est√° disponible en el contexto de usuario.

Ya est√°n disponibles los datos de userData con memberships, user, organization, etc.

Usar componentes de UI ya definidos en @/components/ui y @/components/ui-custom.

Las clases de estilo deben seguir el sistema index.css (no usar estilos inline).

Usar useQuery y useMutation de React Query para cualquier cambio de estado.

Actualizar queryClient cuando se cree, edite o borre un proyecto.

Refactor√° sin romper la estructura actual de Projects.tsx, manteniendo CustomPageLayout, searchValue, filtros, etc.

üéØ El objetivo es que esta nueva vista sea m√°s limpia, profesional, editable y escale mejor a medida que hay m√°s proyectos.
No agregues datos de ejemplo. Us√° lo que venga de Supabase.

¬øListo? ¬°Adelante!