## Objetivo

Implementar correctamente la funcionalidad de subida de archivos (fotos o videos) en el modal de bitácora, asegurando que se respeten las nuevas políticas RLS de Supabase.

---

## Contexto de seguridad (muy importante)

Ya no se usa el `userId` o `organizationId` como prefijo en el nombre del archivo.

Ahora:

- Todos los archivos se suben al bucket `site-log-files`.
- La seguridad y permisos de acceso están centralizados en una tabla llamada `site_log_files`.
- Las RLS de Supabase solo permiten ver, modificar o eliminar archivos si:
  - Existen en la tabla `site_log_files`.
  - Y el usuario actual tiene acceso según `user_id`, `organization_id` y `visibility`.

---

## Qué debe hacer el código

### 1. Al seleccionar archivos en el modal de bitácora:

- Generar un nombre de archivo único (por ejemplo con `uuid` o `timestamp`).
- Subir cada archivo al bucket `site-log-files` con esa ruta limpia:
  ```ts
  const filePath = `${uuidv4()}.${ext}`;
2. Subir archivo a Supabase Storage:
ts
Copiar
Editar
await supabase.storage
  .from('site-log-files')
  .upload(filePath, file);
3. Luego de subir, insertar un registro en la tabla site_log_files con los siguientes datos:
Campo	Valor
file_path	Igual al nombre usado en la subida
file_name	Nombre original del archivo (file.name)
file_type	Tipo de archivo (image/jpeg, video/mp4, etc.)
file_url	URL pública obtenida con getPublicUrl()
site_log_id	ID del día de bitácora al que se adjunta
user_id	ID del usuario autenticado (auth.uid())
organization_id	ID de la organización actual
visibility	"private" o "organization" según opción elegida

Ejemplo de inserción:

ts
Copiar
Editar
await supabase.from('site_log_files').insert({
  file_path,
  file_name: file.name,
  file_type: file.type,
  file_url: supabase.storage.from('site-log-files').getPublicUrl(filePath).data.publicUrl,
  site_log_id,
  user_id,
  organization_id,
  visibility, // puede ser 'private' o 'organization'
});
Consideraciones adicionales
Si no hay opción de visibilidad en la UI aún, usar 'organization' por defecto.

Mostrar los archivos en la bitácora leyendo desde la tabla site_log_files, no directamente desde el bucket.

Eliminar un archivo debe borrar tanto el objeto en Storage como el registro en la tabla.

Resultado esperado
Los archivos se suben correctamente sin errores 403.

Se respetan los permisos: archivos privados solo los ve quien los sube, archivos de la organización son visibles por todos los miembros.

El sistema es escalable y mantenible.