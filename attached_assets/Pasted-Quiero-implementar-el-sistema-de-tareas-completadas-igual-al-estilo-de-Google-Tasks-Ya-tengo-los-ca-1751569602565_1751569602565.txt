Quiero implementar el sistema de tareas completadas igual al estilo de Google Tasks. Ya tengo los campos `is_completed` (boolean) y `completed_at` (timestamptz) en mi base de datos (por ejemplo en la tabla `kanban_cards` o `design_phase_tasks`).

🧠 El comportamiento debe ser el siguiente:

---

### 📌 1. Visualización dividida por estado

- Las tareas deben dividirse en dos listas:
  1. ✅ Activas (is_completed = false)
  2. ✔️ Completadas (is_completed = true)

- Las tareas activas se muestran primero.
- Las tareas completadas deben ir en una sección **colapsable** llamada por ejemplo:
  ```text
  Completadas (5)
📌 2. Interacciones
Cada tarea debe tener un checkbox o ícono para marcarla como completada.

Al marcarla:

Se actualiza is_completed = true y completed_at = now()

Se mueve automáticamente a la sección inferior

La animación debe ser suave si es posible

En la sección de completadas:

Mostrar el nombre de la tarea con line-through y estilo text-muted-foreground opacity-60

Debajo de la tarea, un texto pequeño tipo:

text
Copiar
Editar
Completado el 12 jun
También se debe permitir desmarcar la tarea como completada (volviendo a is_completed = false), y que suba de nuevo.

📦 3. Componente base sugerido
Creamos un componente TaskListWithCompleted.tsx que:

tsx
Copiar
Editar
type Task = {
  id: string;
  title: string;
  description?: string;
  is_completed: boolean;
  completed_at?: string;
};

type Props = {
  tasks: Task[];
  onToggleCompleted: (id: string, completed: boolean) => void;
};

export function TaskListWithCompleted({ tasks, onToggleCompleted }: Props) {
  const active = tasks.filter(t => !t.is_completed);
  const completed = tasks.filter(t => t.is_completed);

  return (
    <div className="space-y-2">
      {active.map(t => (
        <TaskCard key={t.id} task={t} onToggleCompleted={onToggleCompleted} />
      ))}

      <Accordion type="single" collapsible className="pt-2">
        <AccordionItem value="completed">
          <AccordionTrigger className="text-sm text-muted-foreground">
            Completadas ({completed.length})
          </AccordionTrigger>
          <AccordionContent>
            {completed.map(t => (
              <TaskCard key={t.id} task={t} onToggleCompleted={onToggleCompleted} />
            ))}
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
}
✅ 4. En cada TaskCard
Si la tarea está completada:

title debe tener clase line-through opacity-60

Mostrar ícono de check azul (ej. CheckCircle)

Si no está completada:

Mostrar checkbox vacío (ej. Circle)

onClick del checkbox debe ejecutar:

ts
Copiar
Editar
onToggleCompleted(task.id, !task.is_completed)
✅ 5. Persistencia
Al marcar/desmarcar la tarea, debe actualizarse en Supabase:

ts
Copiar
Editar
supabase
  .from("kanban_cards")
  .update({
    is_completed: true,
    completed_at: new Date().toISOString()
  })
  .eq("id", task.id)
📌 NO CAMBIES la lógica general de columnas, ni los campos de supabase. Solo implementá el manejo visual y de UX de tareas completadas y activas al estilo Google Tasks.