üö® Necesito que reemplaces el archivo `ModalFactory.tsx` completo con el siguiente objetivo:

---

üéØ OBJETIVO:

Unificar todo el sistema de modales bajo la l√≥gica central de `FormModalLayout`. Cada modal debe retornar un objeto con la forma:

```tsx
{
  viewPanel: JSX.Element,
  editPanel: JSX.Element,
  headerContent: JSX.Element,
  footerContent: JSX.Element
}
üõ†Ô∏è INSTRUCCIONES:

Import√° los modales que devuelven objetos (ya refactorizados): MemberFormModal, GalleryFormModal, BoardFormModal, CardFormModal.

Hac√© un switch(type) y llam√° a cada modal como funci√≥n (no como JSX), pas√°ndole los props que necesita.

Si el resultado (modalData) es null o no tiene editPanel, devolv√© null.

Si todo est√° bien, retorn√° un √∫nico <FormModalLayout /> con las props:

tsx
Copiar
Editar
<FormModalLayout
  viewPanel={modalData.viewPanel}
  editPanel={modalData.editPanel}
  headerContent={modalData.headerContent}
  footerContent={modalData.footerContent}
  onClose={closeModal}
/>
üì¶ C√ìDIGO QUE DEBE RESULTAR:

tsx
Copiar
Editar
import { useGlobalModalStore } from './useGlobalModalStore';
import { FormModalLayout } from './FormModalLayout';
import { MemberFormModal } from '../modals/MemberFormModal';
import { GalleryFormModal } from '../modals/GalleryFormModal';
import { BoardFormModal } from '../modals/BoardFormModal';
import { CardFormModal } from '../modals/CardFormModal';

export function ModalFactory() {
  const { open, type, data, closeModal } = useGlobalModalStore();

  if (!open) return null;

  const getModalData = () => {
    switch (type) {
      case 'member':
        return MemberFormModal({ editingMember: data?.editingMember, onClose: closeModal });
      case 'gallery':
        return GalleryFormModal({ modalData: data, onClose: closeModal });
      case 'board':
        return BoardFormModal({ modalData: data, onClose: closeModal });
      case 'card':
        return CardFormModal({ modalData: data, onClose: closeModal });
      default:
        return null;
    }
  };

  const modalData = getModalData();

  if (!modalData || !modalData.editPanel) return null;

  return (
    <FormModalLayout
      viewPanel={modalData.viewPanel}
      editPanel={modalData.editPanel}
      headerContent={modalData.headerContent}
      footerContent={modalData.footerContent}
      onClose={closeModal}
    />
  );
}
‚úÖ Asegurate de que los modales como GalleryFormModal ya est√©n refactorizados para devolver ese objeto. Este ModalFactory.tsx no debe renderizar modales directamente.

Gracias.