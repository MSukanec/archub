Quiero implementar un sistema completo para subir y gestionar documentos en mi aplicación.

🧩 Tabla y contexto
Ya tengo una tabla llamada design_documents que incluye los siguientes campos:

id (uuid)

name (text)

description (text)

folder (text)

status (text)

visibility (text)

project_id (uuid)

organization_id (uuid)

design_phase_id (uuid)

created_by (uuid)

file_path (text)

file_url (text)

file_type (text)

file_size (int8)

version_number (int4)

created_at (timestamp)

🎯 Objetivo
Quiero que al subir un nuevo documento, se aplique la siguiente lógica:

Si ya existe un documento con el mismo nombre, carpeta, proyecto y fase de diseño, entonces se debe crear una nueva versión de ese documento (aumentando el version_number).

Si no existe ningún documento previo con esos criterios, debe insertarse con version_number = 1.

🧠 Instrucciones
🔹 1. En la página de /design/documentation
Mostrar los documentos agrupados por nombre, carpeta, proyecto y fase.

De cada grupo, mostrar solo el de mayor version_number (la versión más reciente).

Al hacer clic en un documento, permitir ver las versiones anteriores.

Para obtener la última versión por grupo:

sql
Copiar
Editar
SELECT DISTINCT ON (name, folder, project_id, design_phase_id) *
FROM design_documents
ORDER BY name, folder, project_id, design_phase_id, version_number DESC;
🔹 2. En el modal NewDesignDocumentModal.tsx
📤 Al hacer clic en "Guardar":
Buscar si ya existe un documento con ese mismo nombre, carpeta, proyecto y fase:

ts
Copiar
Editar
const { data: existingDocs } = await supabase
  .from("design_documents")
  .select("version_number")
  .eq("project_id", projectId)
  .eq("folder", folder)
  .eq("name", name)
  .eq("design_phase_id", designPhaseId); // si aplica
Calcular el version_number:

ts
Copiar
Editar
const versionNumber = existingDocs?.length
  ? Math.max(...existingDocs.map((d) => d.version_number ?? 1)) + 1
  : 1;
Subir el archivo al bucket design-documents.

Insertar el documento en la tabla con el nuevo version_number, incluyendo también file_path, file_url, file_size, file_type, etc.

🧹 Extras visuales
Mostrar el version_number como v1, v2, etc. en la card.

Incluir una pequeña opción de “Ver historial de versiones” que despliegue la lista de versiones previas si existen.

✅ Consideraciones
Ya están creadas las RLS necesarias.

El bucket design-documents también tiene sus políticas listas.

Usamos created_by como clave foránea a la tabla users.id.

