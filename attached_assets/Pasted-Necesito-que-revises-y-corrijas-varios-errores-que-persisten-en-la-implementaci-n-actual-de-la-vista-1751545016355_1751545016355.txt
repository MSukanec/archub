Necesito que revises y corrijas varios errores que persisten en la implementación actual de la vista `Cronograma del Proyecto`, tipo Gantt. Si bien algunas cosas mejoraron, se rompieron otras. Te detallo punto por punto lo que sigue funcionando mal y cómo deberías resolverlo.

---

## 🔧 1. Scroll horizontal está mal ubicado

🚫 PROBLEMA:
Actualmente, el scroll horizontal aparece debajo de **ambas columnas**, incluyendo la columna izquierda de texto. Esto rompe la estructura tipo Jira y desincroniza el diseño.

✅ SOLUCIÓN:
- El scroll debe afectar **solo el timeline (grilla de días y barras)**, no la columna izquierda de "Elementos".
- Para eso:
  - Hacé que la **columna izquierda tenga posición `sticky left-0`** y no esté contenida dentro del wrapper con scroll.
  - El wrapper con scroll horizontal debe empezar **desde el GanttGrid hacia la derecha** únicamente.

---

## 🔧 2. Encabezado de meses está mal dibujado

🚫 PROBLEMA:
Solo aparece el mes sobre un único día, y no se alinea con el rango que representa (ej: "JUN" debería abarcar toda la fila de junio).

✅ SOLUCIÓN:
- El encabezado debe agrupar los días por mes.
- En `GanttGrid.tsx`, usá el array `datesByMonth` que ya tenés para renderizar bloques de ancho `n * columnWidth` para cada mes.
- Asegurate que estén arriba de la fila de días y se alineen perfectamente.

---

## 🔧 3. Botones de vista y “Ir a HOY” no funcionan

🚫 PROBLEMA:
- Los botones “Días / Semanas / Meses” no modifican la visualización.
- El botón “Ir a HOY” no hace scroll ni resalta correctamente la columna de hoy.

✅ SOLUCIÓN:
- En `useGanttStore`, asegurate de que `viewMode` actualice correctamente el ancho de columna y el rango visible.
- `getDateArray()` y `getColumnWidth()` deben devolver valores distintos por modo:
  - Día: 1 día por columna
  - Semana: 1 semana por columna (7 días agrupados)
  - Mes: 1 columna por mes
- `Ir a HOY` debe ejecutar un `scrollIntoView()` del div del día actual, centrado.

---

## 🔧 4. Faltan los controles de fechas de inicio y fin del timeline

🚫 PROBLEMA:
No hay forma de definir manualmente el rango del cronograma.

✅ SOLUCIÓN:
- Agregá dos `DatePicker` o inputs para:
  - Fecha de inicio del cronograma
  - Fecha de fin del cronograma
- El timeline debe actualizar el `timelineRange` con esas fechas.
- También puede autoajustarse en base a las tareas si el usuario no define un rango manual.

---

## 🔧 5. No se están mostrando los datos de Supabase

🚫 PROBLEMA:
Aunque hay datos en Supabase (`design_project_phases`, `design_phase_tasks`), no se muestran ni las fases ni las tareas en el Gantt.

✅ SOLUCIÓN:
- Asegurate que la función `getProjectDesignTimeline(project_id)` esté siendo llamada.
- Revisá que `phasesWithTasks` esté bien tipado y pasando correctamente como prop a `Gantt.tsx`
- Las fases deben renderizarse como `GanttRow` tipo "phase".
- Las tareas deben mostrarse como `GanttRow` tipo "task", con su barra (`GanttBar`) y fechas (`start_date`, `end_date`).

---

## 🔧 6. Mejorar alineación visual general

✅ EXTRA:
- El header (`Vista:` + botones + “Ir a Hoy”) debe estar bien alineado con la columna izquierda.
- Asegurate que todas las filas tengan altura constante (`h-10`) y estén sincronizadas entre la parte izquierda y el timeline.
- Las celdas de día deben tener el mismo ancho y borde que las columnas verticales.
- El `today indicator` (línea azul) debe abarcar toda la altura y no romper la grilla.

---

📌 NO CAMBIES:
- La conexión a Supabase.
- La estructura de fases/tareas.
- El uso de Zustand para `viewMode` y `timelineRange`.

🎯 OBJETIVO FINAL:  
La vista debe verse y comportarse igual que en Jira. Visualmente limpia, alineada, scrollable solo en el timeline, con vista por día/semana/mes funcional, y con datos reales cargados desde Supabase.
