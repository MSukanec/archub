const cors = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
const supabase = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_ANON_KEY'));
serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: cors
    });
  }
  try {
    const { user_id, course_slug, price, currency = "ARS", months = null } = await req.json();
    // Validar curso
    const { data: course, error: eCourse } = await supabase.from("courses").select("id, title, slug, is_active").eq("slug", course_slug).maybeSingle();
    if (eCourse || !course || course.is_active !== true) {
      return new Response(JSON.stringify({
        error: "Curso no encontrado o inactivo",
        details: eCourse
      }), {
        status: 400,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    // external_reference: userId|courseSlug|months|null
    const external_reference = [
      user_id,
      course.slug,
      months ?? "null"
    ].join("|");
    // Base de funciones (https://<ref>.functions.supabase.co)
    const functionsBase = new URL(req.url).origin;
    // Crear preferencia
    const mpRes = await fetch("https://api.mercadopago.com/checkout/preferences", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${Deno.env.get("MP_ACCESS_TOKEN")}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        items: [
          {
            title: course.title,
            quantity: 1,
            unit_price: Number(price),
            currency_id: currency
          }
        ],
        external_reference,
        back_urls: {
          success: `${Deno.env.get("CHECKOUT_RETURN_URL_BASE")}?course=${course.slug}`,
          failure: `${Deno.env.get("CHECKOUT_RETURN_URL_BASE")}?course=${course.slug}`,
          pending: `${Deno.env.get("CHECKOUT_RETURN_URL_BASE")}?course=${course.slug}`
        },
        auto_return: "approved",
        notification_url: `${functionsBase}/mp_webhook?secret=${Deno.env.get("MP_WEBHOOK_SECRET")}`
      })
    });
    const mpText = await mpRes.text();
    let pref = null;
    try {
      pref = JSON.parse(mpText);
    } catch  {}
    if (!mpRes.ok) {
      // devuelve detalle de error de MP
      return new Response(JSON.stringify({
        error: "mp_error",
        status: mpRes.status,
        body: pref ?? mpText
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    const url = pref?.sandbox_init_point || pref?.init_point;
    if (!url) {
      return new Response(JSON.stringify({
        error: "No se obtuvo URL de preferencia",
        pref
      }), {
        status: 500,
        headers: {
          ...cors,
          "Content-Type": "application/json"
        }
      });
    }
    return new Response(JSON.stringify({
      sandbox_init_point: pref?.sandbox_init_point,
      init_point: pref?.init_point
    }), {
      headers: {
        ...cors,
        "Content-Type": "application/json"
      }
    });
  } catch (e) {
    return new Response(JSON.stringify({
      error: String(e)
    }), {
      status: 500,
      headers: {
        ...cors,
        "Content-Type": "application/json"
      }
    });
  }
});
