Quiero que soluciones el comportamiento de las flechas SVG de dependencias en el Gantt. Actualmente, aparecen mal posicionadas, desaparecen al scrollear y no se alinean con las barras. Esto es lo que debe corregirse:

---

### üéØ OBJETIVO
Que las flechas SVG entre tareas funcionen de forma fluida, correcta y visualmente perfecta:

- ‚úÖ Se mantengan alineadas con las tareas al scrollear horizontal y verticalmente.
- ‚úÖ Se dibujen con l√≠neas rectas (horizontal-horizontal o horizontal-vertical-horizontal), como en el ejemplo de abajo que te muestro en la app.
- ‚úÖ Est√©n siempre dentro del √°rea visible del timeline.
- ‚úÖ Sean cliqueables y no interfieran con las barras.
- ‚úÖ Tengan marcador de flecha (`arrowhead`) al final del trazo.

---

### üõ†Ô∏è 1. ESCUCHAR SCROLL Y FORZAR RE-RENDER

En el componente `GanttDependencies.tsx`, agreg√° un efecto para escuchar el scroll del contenedor `#timeline-content-scroll` y forzar un `setState()` (aunque sea ficticio) para re-renderizar las flechas cuando se scrollea.

```tsx
useEffect(() => {
  const el = document.getElementById('timeline-content-scroll');
  if (!el) return;

  const handleScroll = () => {
    setScrollLeft(el.scrollLeft);
  };

  el.addEventListener('scroll', handleScroll);
  return () => el.removeEventListener('scroll', handleScroll);
}, []);
Esto es fundamental para que las flechas se redibujen correctamente al mover el timeline.

üß† 2. AJUSTAR COORDENADAS CON scrollLeft
Cuando calcules las coordenadas de los conectores (los c√≠rculos de conexi√≥n), siempre sum√° el scrollLeft para convertir de coordenadas de getBoundingClientRect() a coordenadas relativas al SVG:

tsx
Copiar
Editar
const container = document.getElementById('timeline-content-scroll');
const scrollLeft = container?.scrollLeft || 0;

const fromX = fromEl.getBoundingClientRect().left + scrollLeft;
const toX = toEl.getBoundingClientRect().left + scrollLeft;
Lo mismo para top si necesit√°s scrollTop.

‚úèÔ∏è 3. DIBUJAR FLECHAS RECTAS CON PEQUE√ëA CURVA
En la funci√≥n que genera el d de la flecha (generatePath()), us√° algo como esto:

tsx
Copiar
Editar
const generatePath = (from, to) => {
  const offsetX = 40;

  return `
    M ${from.x} ${from.y}
    H ${from.x + offsetX}
    V ${to.y}
    H ${to.x}
  `;
};
Eso genera una flecha estilo ‚ÄúL invertida‚Äù, bien limpia, como las del Gantt de referencia.

üîö 4. USAR MARCADOR DE FLECHA
Agreg√° el marcador de flecha al final:

tsx
Copiar
Editar
<defs>
  <marker id="arrowhead" markerWidth="10" markerHeight="7" 
    refX="10" refY="3.5" orient="auto">
    <polygon points="0 0, 10 3.5, 0 7" fill="#aaa" />
  </marker>
</defs>
Y en el <path>:

tsx
Copiar
Editar
<path
  d={generatePath(from, to)}
  stroke="#aaa"
  strokeWidth="2"
  fill="none"
  markerEnd="url(#arrowhead)"
  className="cursor-pointer hover:stroke-red-400 pointer-events-auto"
  onClick={() => openDependencyModal(dep)}
/>
üßº 5. ACOMODAR EL SVG
Asegurate de que el SVG que contiene las flechas est√© posicionado as√≠:

tsx
Copiar
Editar
<svg
  className="absolute top-0 left-0 w-full h-full pointer-events-none"
  style={{ zIndex: 10 }}
>
  {/* flechas */}
</svg>
Y que est√© dentro del mismo contenedor del scroll horizontal (#timeline-content-scroll o sincronizado con √©l).

Aplic√° todo esto para que el sistema de flechas funcione fluido, bien posicionado y profesional. Confirmame cuando est√©.