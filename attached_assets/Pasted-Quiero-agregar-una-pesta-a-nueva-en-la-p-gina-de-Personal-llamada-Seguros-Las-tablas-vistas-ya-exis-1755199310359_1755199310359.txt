Quiero agregar una pestaña nueva en la página de Personal llamada Seguros.
Las tablas/vistas ya existen en Supabase:

public.personnel_insurances (CRUD)

public.v_personnel_insurance_status (lista con days_to_expiry y status: vigente | por_vencer | vencido)

Reutilizar public.contact_attachments para subir certificados (category='insurance_certificate', bucket: contact-files)

Seguir las convenciones del proyecto y el documento src/components/modal/README.md para el modal.

1) UI / Navegación

En la página de Personal (donde hoy están Activos y Asistencia), agregar una tercera tab: Seguros.

Al entrar a Seguros:

Mostrar tres KPIs arriba (chips/Badges):

Vigentes (verde)

Por vencer ≤ 30 días (amarillo)

Vencidos (rojo)
Cada chip filtra la grilla al hacer click.

Toolbar a la derecha: botón “Nuevo Seguro”.

Tabla con columnas:

Persona (avatar + nombre)

Tipo (ART/Vida/Accidentes/RC/Salud/Otro)

Nº de póliza

Aseguradora

Vigencia (desde–hasta)

Días para vencer (de la vista)

Estado (badge con color)

Certificado (ícono si hay adjunto; click → ver/descargar)

Acciones: Editar, Renovar, Eliminar

Filtros (arriba o en Drawer lateral):

Estado, Tipo, Proyecto (si aplica), Aseguradora, Rango de vencimiento (hasta X días)

2) Estructura de archivos (añadir/modificar)
src/pages/projects/[id]/personnel/InsuranceTab.tsx           // NUEVO
src/components/personnel/insurance/InsuranceGrid.tsx         // NUEVO
src/components/personnel/insurance/InsuranceKpis.tsx         // NUEVO
src/components/personnel/insurance/InsuranceActions.tsx      // NUEVO (botones fila)
src/components/personnel/insurance/InsuranceModal.tsx        // NUEVO (crear/editar)
src/components/personnel/insurance/RenewInsuranceModal.tsx   // NUEVO (renovar)
src/services/insurances.ts                                    // NUEVO (supabase)
src/hooks/useInsurances.ts                                    // NUEVO (react-query)
src/components/attachments/AttachmentBadge.tsx                // NUEVO (muestra certificado, abre visor)


Nota: Respetar el patrón de modales de src/components/modal/README.md (props, focus trap, onOpenChange, tamaños, etc.).

3) Servicios (Supabase) — src/services/insurances.ts

Implementar con Supabase JS:

type Insurance = {
  id: string;
  organization_id: string;
  project_id?: string | null;
  contact_id: string;
  insurance_type: 'ART' | 'vida' | 'accidentes' | 'responsabilidad_civil' | 'salud' | 'otro';
  policy_number?: string | null;
  provider?: string | null;
  coverage_start: string; // ISO date
  coverage_end: string;   // ISO date
  reminder_days?: number[]; // default [30,15,7]
  certificate_attachment_id?: string | null;
  notes?: string | null;
  created_by?: string | null;
  created_at?: string;
  updated_at?: string;
};

type InsuranceStatusRow = Insurance & {
  days_to_expiry: number;                // de la vista
  status: 'vigente' | 'por_vencer' | 'vencido';
  contact: { id: string; full_name: string; avatar_attachment_id?: string | null }; // join sugerido si ya existe
};


Funciones:

listInsurances(params) → select de v_personnel_insurance_status con filtros (estado, tipo, proyecto, text search por persona/aseguradora/póliza, paginado).

getInsurance(id)

createInsurance(payload: Insurance) → insert en personnel_insurances

updateInsurance(id, payload)

deleteInsurance(id)

renewInsurance(prevId, { coverage_start, coverage_end, policy_number?, provider?, certificate_attachment_id?, notes? })

Duplicar datos relevantes del anterior, setear nuevo rango, coverage_start = previous.coverage_end + 1 day

uploadCertificate(contactId, file) → sube a bucket contact-files y crea row en contact_attachments con category='insurance_certificate' → retorna attachment_id

getCertificatePublicUrl(attachmentId) (resolver via contact_attachments + helper de storage)

Importante: todas las funciones deben respetar RLS (no usar service key en frontend). Incluir created_by = auth.user().id cuando aplique.

4) Hooks — src/hooks/useInsurances.ts

useInsuranceList(filters) → usa React Query (['insurances', projectId, filters])

useCreateInsurance(), useUpdateInsurance(), useDeleteInsurance(), useRenewInsurance()

Invalidar cache tras mutaciones: insurances y, si existe, personnel (para pintar el chip de estado en la lista de personal).

5) Componentes
InsuranceKpis.tsx

Recibe data de la lista y calcula conteos por status.

Tres tarjetas clicables: Vigentes, Por vencer (≤30), Vencidos.

Al click, setea filtro de estado.

InsuranceGrid.tsx

Tabla con columnas especificadas arriba.

Render de Persona: avatar + nombre (reutilizar componente de avatar si existe).

Estado: badge coloreado.

Certificado: si existe certificate_attachment_id, mostrar AttachmentBadge (abre visor/download).

Acciones: usa InsuranceActions.

InsuranceActions.tsx

Botones: Editar (abre InsuranceModal en modo edit), Renovar (abre RenewInsuranceModal), Eliminar (confirmación → deleteInsurance).

InsuranceModal.tsx

Seguir src/components/modal/README.md:

Props: { open, onOpenChange, initial?: Insurance, projectId, defaultContactId? }

Campos:

Persona (contact_id) — autocomplete (solo contactos asignados a project_personnel si existe)

Tipo (insurance_type) — select

Nº de póliza — input

Aseguradora (provider) — input

Vigencia: coverage_start, coverage_end — date pickers (validar start <= end)

Recordatorios (reminder_days) — chips multiselect con default [30,15,7]

Certificado — uploader (usa uploadCertificate y guarda certificate_attachment_id)

Notas — textarea

Footer con Guardar / Cancelar

Validaciones:

contact_id y insurance_type obligatorios

Fechas válidas y coverage_end ≥ coverage_start

Submit:

createInsurance o updateInsurance según modo

Toasts de éxito/error y cierre del modal

Accesibilidad: focus trap, ESC, onOpenChange controla desmontaje

RenewInsuranceModal.tsx

Props: { open, onOpenChange, previous: Insurance }

Muestra datos del seguro anterior “en lectura” y solo pide:

coverage_start (default = previous.coverage_end + 1 día)

coverage_end (obligatorio)

(Opcional) nuevo policy_number, provider, certificate (reemplaza)

Guardar → renewInsurance(previous.id, payload)

AttachmentBadge.tsx

Ícono + texto (“Certificado” / nombre archivo).

Click → abre visor (usar UnifiedViewer si lo tienen; sino, descarga directa).

Menu: Ver/Descargar / Reemplazar / Quitar vínculo

6) Lógica de filtros y búsqueda

status: múltiple (vigente/por_vencer/vencido)

type: múltiple

provider: text

contact_id: múltiple

expires_before: fecha (ej: “mostrar los que vencen antes de X”)

project_id: si aplica en el contexto de ruta

Aplicar a la query de v_personnel_insurance_status. Orden por coverage_end ASC por defecto (los más urgentes primero).

7) UX/Detalles

Zoom en visor de certificado: usar el UnifiedViewer que ya definimos (si no, usar el viewer de imagen/PDF existente).

Colores de estado:

vigente: verde suave

por_vencer: amarillo

vencido: rojo

Empty state con CTA “Nuevo Seguro”.

Mensajes/Toasts consistentes:

“Seguro creado”

“Seguro actualizado”

“Seguro renovado”

“Seguro eliminado”

“No se pudo cargar el certificado” (si falla subida)

8) QA / Criterios de aceptación

Ver lista filtrada por Vigentes / Por vencer / Vencidos.

Crear un seguro con certificado → aparece en grilla con estado correcto.

Renovar un seguro (duplica registro con nuevo rango) → el anterior queda histórico, el nuevo vigente.

Editar datos (aseguradora / número) → persiste.

Eliminar → confirma y elimina (según RLS).

Certificado: se puede ver y descargar.

Filtros y búsqueda textual funcionan con paginado.

9) Edge cases

Evitar solapes de fecha en la misma persona+tipo: mostrar error si el backend devuelve violación de índice/constraint.

Si se intenta cargar asistencia (en otra tab) con seguro vencido, mostrar warning (opcional por ahora, dejar helper preparado).

Si el bucket es privado, usar URLs firmadas para ver/descargar.

10) Estilo

Mantener estética actual (cards, bordes suaves, modo dark).

Tabla con filas compactas; mostrar title/tooltip en celdas largas.

Modales tamaño md, scroll interno si el formulario crece.