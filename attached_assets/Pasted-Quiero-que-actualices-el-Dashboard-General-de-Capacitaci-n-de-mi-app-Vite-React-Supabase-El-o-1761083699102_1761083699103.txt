Quiero que actualices el Dashboard General de Capacitación de mi app (Vite + React + Supabase).
El objetivo es mostrar progreso global, tiempo de estudio, racha, cursos activos y actividad reciente con gráficos.
Usa Recharts para los charts y guarda los componentes en src/components/charts/courses.

0) Contexto de datos (ya existen en la DB)

Las vistas de Postgres (Supabase) que debes consumir, filtrando por el user_id autenticado:

public.v_course_progress → filas por (course_id, user_id) con:
progress_pct, done_lessons, total_lessons.

public.v_user_global_progress → una fila por user_id con:
progress_pct, done_lessons_total, total_lessons_total.

public.v_user_study_time → una fila por user_id con:
seconds_lifetime, seconds_this_month.

public.v_user_active_days → muchas filas por user_id con:
day (date de días activos).

Además, para cursos activos y actividad reciente, usar:
course_lesson_progress (join con course_lessons → course_modules → courses) para obtener updated_at/completed_at, títulos y curso.

Importante: usa el cliente Supabase con sesión (auth) que ya hay en el proyecto.

1) Dependencias

Instala Recharts si no está:

npm i recharts

2) Estructura de archivos nueva / modificada

Servicios de datos

src/lib/supabase/training.ts ← crea este módulo con todas las queries del dashboard.

Charts (crear)

src/components/charts/courses/ProgressRing.tsx

src/components/charts/courses/MiniBar.tsx

src/components/charts/courses/LineStreak.tsx

UI del dashboard

src/pages/training/Dashboard.tsx ← reemplazar contenido del dashboard general con los bloques nuevos.

Si la ruta actual difiere, usa el archivo equivalente (no el del curso individual).

3) Servicios (código)

Crea src/lib/supabase/training.ts con estas funciones (TypeScript):

// src/lib/supabase/training.ts
import { supabase } from "@/lib/supabaseClient";

export type CourseProgressRow = {
  course_id: string;
  user_id: string;
  progress_pct: number;
  done_lessons: number;
  total_lessons: number;
};

export type GlobalProgress = {
  user_id: string;
  done_lessons_total: number;
  total_lessons_total: number;
  progress_pct: number;
};

export type StudyTime = {
  user_id: string;
  seconds_lifetime: number;
  seconds_this_month: number;
};

export type ActiveDay = { user_id: string; day: string };

export async function fetchGlobalProgress() {
  const { data, error } = await supabase
    .from("v_user_global_progress")
    .select("*")
    .single();
  if (error && error.code !== "PGRST116") throw error; // no rows
  return (data ?? null) as GlobalProgress | null;
}

export async function fetchCourseProgress() {
  const { data, error } = await supabase
    .from("v_course_progress")
    .select("*");
  if (error) throw error;
  return data as CourseProgressRow[];
}

export async function fetchStudyTime() {
  const { data, error } = await supabase
    .from("v_user_study_time")
    .select("*")
    .single();
  if (error && error.code !== "PGRST116") throw error;
  return (data ?? null) as StudyTime | null;
}

export async function fetchActiveDays(limitDays = 90) {
  const { data, error } = await supabase
    .from("v_user_active_days")
    .select("*")
    .gte("day", new Date(Date.now() - limitDays * 86400000).toISOString().slice(0,10))
    .order("day", { ascending: true });
  if (error) throw error;
  return data as ActiveDay[];
}

export type RecentActivityItem = {
  course_id: string;
  course_title: string;
  module_id: string;
  lesson_id: string;
  lesson_title: string;
  when: string; // ISO
  type: "completed" | "progress";
};

export async function fetchCoursesActiveTop(limit = 3) {
  const { data, error } = await supabase.rpc("get_courses_active_top", { p_limit: limit });
  // Si no existe la RPC, usar fallback con SQL en el front (join simple).
  if (error) console.warn("RPC get_courses_active_top not found, fallback needed", error);
  return (data ?? []) as Array<{ course_id: string; title: string; last_seen_at: string }>;
}

export async function fetchRecentActivity(limit = 10): Promise<RecentActivityItem[]> {
  // Fallback directo (sin RPC): join manual con 2 consultas
  const { data, error } = await supabase
    .from("course_lesson_progress")
    .select(`
      lesson_id,
      user_id,
      updated_at,
      completed_at,
      is_completed,
      course_lessons (
        id, title, module_id,
        course_modules!inner ( id, course_id, courses!inner(id, title) )
      )
    `)
    .order("completed_at", { ascending: false, nullsFirst: false })
    .order("updated_at", { ascending: false, nullsFirst: false })
    .limit(limit);

  if (error) throw error;

  const items: RecentActivityItem[] = (data ?? []).map((r: any) => ({
    course_id: r.course_lessons.course_modules.courses.id,
    course_title: r.course_lessons.course_modules.courses.title,
    module_id: r.course_lessons.course_modules.id,
    lesson_id: r.lesson_id,
    lesson_title: r.course_lessons.title,
    when: (r.completed_at ?? r.updated_at),
    type: r.is_completed ? "completed" : "progress",
  }));

  return items;
}


Si ya tienes supabaseClient, reutilízalo. Si tu naming de rutas de relaciones cambia, ajusta los select anidados.

4) Charts (código)

Anillo de progreso global

// src/components/charts/courses/ProgressRing.tsx
import { ResponsiveContainer, RadialBarChart, RadialBar, PolarAngleAxis } from "recharts";

export default function ProgressRing({ value = 0 }: { value: number }) {
  const data = [{ name: "progress", value: Math.max(0, Math.min(100, value)) }];
  return (
    <div className="w-full h-48">
      <ResponsiveContainer>
        <RadialBarChart innerRadius="80%" outerRadius="100%" data={data} startAngle={90} endAngle={-270}>
          <PolarAngleAxis type="number" domain={[0, 100]} tick={false} />
          <RadialBar dataKey="value" cornerRadius={50} />
        </RadialBarChart>
      </ResponsiveContainer>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-2xl font-semibold">{value?.toFixed(0)}%</span>
      </div>
    </div>
  );
}


Mini barras (horas)

// src/components/charts/courses/MiniBar.tsx
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";

export default function MiniBar({ data }: { data: { name: string; value: number }[] }) {
  return (
    <div className="w-full h-28">
      <ResponsiveContainer>
        <BarChart data={data}>
          <XAxis dataKey="name" hide />
          <YAxis hide />
          <Tooltip />
          <Bar dataKey="value" radius={[6,6,0,0]} />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}


Línea de racha (últimos 30–60 días)

// src/components/charts/courses/LineStreak.tsx
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";

export default function LineStreak({ data }: { data: { day: string; active: number }[] }) {
  return (
    <div className="w-full h-28">
      <ResponsiveContainer>
        <LineChart data={data}>
          <XAxis dataKey="day" hide />
          <YAxis hide />
          <Tooltip />
          <Line type="monotone" dataKey="active" dot={false} />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

5) Dashboard (código)

Modifica src/pages/training/Dashboard.tsx para usar los servicios y charts.
Diseño en 4 bloques (Hero, KPIs, Cursos Activos, Actividad Reciente).

// src/pages/training/Dashboard.tsx
import { useEffect, useMemo, useState } from "react";
import ProgressRing from "@/components/charts/courses/ProgressRing";
import MiniBar from "@/components/charts/courses/MiniBar";
import LineStreak from "@/components/charts/courses/LineStreak";
import {
  fetchGlobalProgress,
  fetchStudyTime,
  fetchActiveDays,
  fetchCourseProgress,
  fetchCoursesActiveTop,
  fetchRecentActivity,
  GlobalProgress,
  StudyTime,
  ActiveDay,
  CourseProgressRow
} from "@/lib/supabase/training";

export default function TrainingDashboard() {
  const [global, setGlobal] = useState<GlobalProgress | null>(null);
  const [study, setStudy]   = useState<StudyTime | null>(null);
  const [days, setDays]     = useState<ActiveDay[]>([]);
  const [courses, setCourses] = useState<CourseProgressRow[]>([]);
  const [recent, setRecent] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      setLoading(true);
      const [g, s, d, cp, ra] = await Promise.all([
        fetchGlobalProgress(),
        fetchStudyTime(),
        fetchActiveDays(60),
        fetchCourseProgress(),
        fetchRecentActivity(8),
      ]);
      setGlobal(g);
      setStudy(s);
      setDays(d);
      setCourses(cp);
      setRecent(ra);
      setLoading(false);
    })();
  }, []);

  const hoursData = useMemo(() => ([
    { name: "Mes", value: Math.round((study?.seconds_this_month ?? 0) / 3600) },
    { name: "Total", value: Math.round((study?.seconds_lifetime ?? 0) / 3600) }
  ]), [study]);

  const streakSeries = useMemo(() => {
    // map a 0/1 por día para el sparkline
    const set = new Set(days.map(d => d.day));
    const last30: { day: string; active: number }[] = [];
    const today = new Date();
    for (let i = 29; i >= 0; i--) {
      const dt = new Date(today.getTime() - i * 86400000);
      const key = dt.toISOString().slice(0,10);
      last30.push({ day: key, active: set.has(key) ? 1 : 0 });
    }
    return last30;
  }, [days]);

  const coursesSorted = useMemo(() => {
    // si tienes títulos en otra tabla, mézclalos en el fetch
    return [...courses].sort((a, b) => b.progress_pct - a.progress_pct).slice(0, 3);
  }, [courses]);

  if (loading) return <div className="p-6">Cargando...</div>;

  return (
    <div className="p-6 space-y-6">
      {/* HERO */}
      <section className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2 p-6 rounded-2xl shadow bg-white dark:bg-neutral-900">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Progreso General de Aprendizaje</h2>
            <span className="text-sm opacity-70">
              {global ? `${global.done_lessons_total}/${global.total_lessons_total} lecciones` : "—"}
            </span>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="md:col-span-2 relative">
              <ProgressRing value={global?.progress_pct ?? 0} />
            </div>
            <div className="space-y-4">
              <div>
                <div className="text-sm opacity-70 mb-2">Horas de estudio</div>
                <MiniBar data={hoursData} />
              </div>
              <div>
                <div className="text-sm opacity-70 mb-2">Racha (30 días)</div>
                <LineStreak data={streakSeries} />
              </div>
            </div>
            <div className="space-y-2">
              <Kpi label="Lecciones completadas" value={global?.done_lessons_total ?? 0} />
              <Kpi label="Total de lecciones" value={global?.total_lessons_total ?? 0} />
            </div>
          </div>
        </div>

        <div className="p-6 rounded-2xl shadow bg-white dark:bg-neutral-900">
          <h3 className="text-lg font-semibold mb-4">Cursos en Progreso</h3>
          <div className="space-y-3">
            {coursesSorted.map(c => (
              <CourseRow key={c.course_id} title={"Curso"} pct={Number(c.progress_pct)} done={c.done_lessons} total={c.total_lessons} />
            ))}
            {coursesSorted.length === 0 && <div className="text-sm opacity-70">Aún no comenzaste ningún curso.</div>}
          </div>
        </div>
      </section>

      {/* ACTIVIDAD RECIENTE */}
      <section className="p-6 rounded-2xl shadow bg-white dark:bg-neutral-900">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Actividad Reciente</h3>
        </div>
        <ul className="divide-y divide-neutral-200/60 dark:divide-neutral-800">
          {recent.map(item => (
            <li key={item.lesson_id + item.when} className="py-3 flex items-center justify-between">
              <div>
                <div className="text-sm font-medium">{item.lesson_title}</div>
                <div className="text-xs opacity-70">{item.course_title}</div>
              </div>
              <div className="text-xs opacity-70">{new Date(item.when).toLocaleString()}</div>
            </li>
          ))}
          {recent.length === 0 && <div className="text-sm opacity-70">Sin actividad por ahora.</div>}
        </ul>
      </section>
    </div>
  );
}

function Kpi({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="p-4 rounded-xl bg-neutral-50 dark:bg-neutral-800">
      <div className="text-2xl font-semibold">{value}</div>
      <div className="text-xs opacity-70">{label}</div>
    </div>
  );
}

function CourseRow({ title, pct, done, total }: { title: string; pct: number; done: number; total: number }) {
  return (
    <div className="flex items-center justify-between">
      <div className="text-sm">{title}</div>
      <div className="text-xs opacity-70">{done}/{total}</div>
      <div className="w-32 h-2 rounded bg-neutral-200 dark:bg-neutral-800 overflow-hidden">
        <div className="h-2 rounded bg-emerald-500" style={{ width: `${Math.min(100, Math.max(0, pct))}%` }} />
      </div>
      <div className="text-xs w-10 text-right">{pct.toFixed(0)}%</div>
    </div>
  );
}


Usa tu sistema de UI (shadcn/ui si lo tenés). Mantén grid, rounded-2xl, sombras suaves y espaciado amplio.

6) Criterios de aceptación

El Anillo muestra el % global de v_user_global_progress.

Los KPIs muestran done_lessons_total y total_lessons_total.

Horas: barra con “Mes” y “Total” (desde v_user_study_time).

Racha: línea 0/1 con los días activos de los últimos 30.

Cursos en progreso: top 3 por % (desde v_course_progress).

Actividad reciente: últimos 8 eventos (completado o progreso) con título de lección + curso.

Todos los fetch usan el cliente Supabase autenticado.

El dashboard sigue respondiendo bien en mobile (1 columna) y desktop (3/1 columnas como en el layout propuesto).

7) Notas

Si ya hay un dashboard previo, reemplaza solo el “general” (no el de cada curso), manteniendo rutas y provider de contexto actuales.

Si tu select anidado para actividad reciente no compila por naming de relaciones, ajusta los nombres (courses, course_modules, course_lessons) según tu esquema.

No uses estilos en línea de colores de charts (deja defaults o el color por clase Tailwind si aplica en contenedor).