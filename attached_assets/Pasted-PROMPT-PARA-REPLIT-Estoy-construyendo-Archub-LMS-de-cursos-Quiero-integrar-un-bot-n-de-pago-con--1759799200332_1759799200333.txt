PROMPT PARA REPLIT

Estoy construyendo Archub (LMS de cursos). Quiero integrar un botón de pago con Mercado Pago usando una Edge Function de Supabase ya desplegada.

Qué hay que hacer:

Crear un componente PayButton.tsx en React/TypeScript que:

Reciba props: userId: string, courseSlug: string, price: number, currency?: 'ARS'|'USD', months?: number|null.

Haga POST a https://wtatvsgeivymcppowrfy.functions.supabase.co/create_mp_preference con este body:

{
  "user_id": "<userId>",
  "course_slug": "<courseSlug>",
  "price": <price>,
  "currency": "<currency || 'ARS'>",
  "months": <months || null>
}


Si la respuesta trae sandbox_init_point o init_point, redirige con:

window.location.href = resp.sandbox_init_point || resp.init_point;


Disable/Loading states + manejo de errores (toast o alert).

Incrustar el botón en mi vista del curso (Visor) mostrando “Comprar curso” solo si el usuario NO está inscripto (prop booleana isEnrolled).

Crear una página de retorno /cursos/retorno que:

Muestre “Procesando pago…”.

Cada 1.5s consulte a mi API (o directamente a Supabase) si existe una fila active en course_enrollments para userId y courseSlug.

Cuando esté active, mostrar botón “Ir al curso” y navegar al visor.

Código guía para el botón:
import React from 'react';

type Props = {
  userId: string;
  courseSlug: string;
  price: number;
  currency?: 'ARS' | 'USD';
  months?: number | null;
  className?: string;
};

export default function PayButton({
  userId, courseSlug, price, currency = 'ARS', months = null, className
}: Props) {
  const [loading, setLoading] = React.useState(false);

  const onPay = async () => {
    try {
      setLoading(true);
      const r = await fetch('https://wtatvsgeivymcppowrfy.functions.supabase.co/create_mp_preference', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: userId, course_slug: courseSlug, price, currency, months })
      });
      const data = await r.json();
      if (!r.ok) throw new Error(data?.error || 'No se pudo crear la preferencia');
      const url = data.sandbox_init_point || data.init_point;
      if (!url) throw new Error('Preferencia sin URL');
      window.location.href = url;
    } catch (e:any) {
      alert(e.message || 'Error al iniciar pago');
    } finally {
      setLoading(false);
    }
  };

  return (
    <button
      onClick={onPay}
      disabled={loading}
      className={className || 'px-4 py-2 rounded-xl bg-black text-white'}
    >
      {loading ? 'Redirigiendo…' : 'Comprar curso'}
    </button>
  );
}

Uso en el visor:
// en CourseViewer.tsx (o equivalente)
{ !isEnrolled && (
  <PayButton
    userId={currentUser.id}
    courseSlug={course.slug}
    price={1000}
    currency="ARS"
    months={null}
    className="w-full py-3 rounded-2xl bg-emerald-600 text-white font-medium"
  />
)}

Página /cursos/retorno (polling simple):
import React from 'react';

export default function Retorno() {
  const params = new URLSearchParams(window.location.search);
  const course = params.get('course') || '';
  const userId = '<INYECTA_ID_USUARIO_LOGEADO>'; // depende de tu auth

  const [ready, setReady] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    let t: any;
    const tick = async () => {
      try {
        // endpoint propio o llamada directa a Supabase REST/RPC
        const r = await fetch(`/api/check-enrollment?userId=${userId}&slug=${course}`);
        const data = await r.json();
        if (data?.active) setReady(true); else t = setTimeout(tick, 1500);
      } catch (e:any) { setError(e.message); }
    };
    tick();
    return () => clearTimeout(t);
  }, []);

  if (error) return <div>Error: {error}</div>;
  if (!ready) return <div>Procesando pago… no cierres esta página.</div>;
  return <a href={`/cursos/${course}`} className="btn-primary">Ir al curso</a>;
}


Importante UX: si el usuario ya está inscripto, ocultar el botón y mostrar “Continuar curso” que navegue al visor.