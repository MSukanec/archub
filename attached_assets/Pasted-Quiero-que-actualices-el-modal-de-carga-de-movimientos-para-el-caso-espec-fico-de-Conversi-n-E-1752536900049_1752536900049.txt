Quiero que actualices el modal de carga de movimientos para el caso específico de "Conversión".

Este movimiento NO debe comportarse como un movimiento único, sino como un "grupo" que representa dos movimientos reales:

1. Un egreso en una moneda desde una billetera origen
2. Un ingreso en otra moneda a una billetera destino

Ambos movimientos se guardan en la tabla `movements` de Supabase, y están relacionados por el campo `conversion_group_id`.

⚠️ IMPORTANTE: Esta lógica **ya existe**. No hay que romperla. Solo queremos mejorar el modal para que permita completar la información completa desde un solo formulario.

---

🧩 NUEVOS CAMPOS QUE EL MODAL DEBE MOSTRAR CUANDO EL `view_mode` SEA `"conversion"`:

- `moneda_origen` (`currency_id_from`)
- `billetera_origen` (`wallet_id_from`)
- `cantidad_origen` (`amount_from`)
- `moneda_destino` (`currency_id_to`)
- `billetera_destino` (`wallet_id_to`)
- `cantidad_destino` (`amount_to`)
- `exchange_rate` (opcional, solo informativo)

---

🎯 ¿Qué debe hacer el modal al guardar?

Debe ejecutar una única acción que:

- Genere un `conversion_group_id` (UUID)
- Cree dos movimientos:
  - Un egreso con los campos de origen
  - Un ingreso con los campos de destino
- Ambos deben tener `conversion_group_id` y ser guardados en Supabase juntos

Esto se hace a través de una función `useInsertConversionMovement()` que ya está implementada.

---

🧩 Detalles técnicos del modal:

- Solo debe renderizar este formulario si el concepto seleccionado tiene `view_mode = "conversion"`
- Los campos deben estar bien tipados y validados (por ejemplo, ambos montos deben ser > 0)
- El botón de guardar debe invocar `useInsertConversionMovement()` con todos los datos correctamente mapeados

---

🔁 El sistema de tabla de movimientos ya muestra correctamente las conversiones agrupadas por `conversion_group_id`, así que **no debe cambiarse nada en la vista**.

📁 El modal debe seguir existiendo en `MovementFormModal.tsx`.

📦 El hook a usar es `useInsertConversionMovement()`, o crearlo si no existe.
